[INFO 11-23 10:24:20] ax.service.ax_client: Starting optimization with verbose logging. To disable logging, set the `verbose_logging` argument to `False`. Note that float values in the logs are rounded to 6 decimal points.
[INFO 11-23 10:24:20] ax.service.utils.instantiation: Inferred value type of ParameterType.STRING for parameter integration_method. If that is not the expected value type, you can explicity specify 'value_type' ('int', 'float', 'bool' or 'str') in parameter dict.
/home/mschl/.local/lib/python3.10/site-packages/ax/core/parameter.py:481: UserWarning: `is_ordered` is not specified for `ChoiceParameter` "integration_method". Defaulting to `False` for parameters of `ParameterType` STRING. To override this behavior (or avoid this warning), specify `is_ordered` during `ChoiceParameter` construction.
  warn(
/home/mschl/.local/lib/python3.10/site-packages/ax/core/parameter.py:481: UserWarning: `sort_values` is not specified for `ChoiceParameter` "integration_method". Defaulting to `False` for parameters of `ParameterType` STRING. To override this behavior (or avoid this warning), specify `sort_values` during `ChoiceParameter` construction.
  warn(
[INFO 11-23 10:24:20] ax.service.utils.instantiation: Inferred value type of ParameterType.FLOAT for parameter sensor_std. If that is not the expected value type, you can explicity specify 'value_type' ('int', 'float', 'bool' or 'str') in parameter dict.
[INFO 11-23 10:24:20] ax.service.utils.instantiation: Created search space: SearchSpace(parameters=[RangeParameter(name='dt', parameter_type=FLOAT, range=[0.1, 1.5]), ChoiceParameter(name='integration_method', parameter_type=STRING, values=['RK1', 'RK2', 'RK4'], is_ordered=False, sort_values=False), RangeParameter(name='sensor_std', parameter_type=FLOAT, range=[0.1, 10.0])], parameter_constraints=[]).
[INFO 11-23 10:24:20] ax.modelbridge.dispatch_utils: Using Bayesian optimization with a categorical kernel for improved performance with a large number of unordered categorical parameters.
[INFO 11-23 10:24:20] ax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+BO_MIXED', steps=[Sobol for 6 trials, BO_MIXED for subsequent trials]). Iterations after 6 will take longer to generate due to  model-fitting.
/home/mschl/.local/lib/python3.10/site-packages/ax/core/observation.py:274: FutureWarning: In a future version of pandas, a length 1 tuple will be returned when iterating over a groupby with a grouper equal to a list of length 1. Don't supply a list with a single grouper to avoid this warning.
  for g, d in df.groupby(by=cols):
[INFO 11-23 10:24:20] ax.service.ax_client: Generated new trial 0 with parameters {'dt': 1.334628, 'sensor_std': 3.014947, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:08<00:25,  8.40s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:18<00:18,  9.45s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:27<00:09,  9.33s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:37<00:00,  9.46s/it]100%|██████████| 4/4 [00:37<00:00,  9.36s/it]
[INFO 11-23 10:24:58] ax.service.ax_client: Completed trial 0 with data: {'mse': (96.18042, 0.0), 'compute_cost': (81.140249, 0.0)}.
[INFO 11-23 10:24:58] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 1.334627640247345, 'sensor_std': 3.014947161078453, 'integration_method': 'RK4'}
Best Values:  ({'mse': 96.180419921875, 'compute_cost': 81.14024917389119}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:24:58] ax.service.ax_client: Generated new trial 1 with parameters {'dt': 0.785075, 'sensor_std': 0.380756, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:08<00:26,  8.97s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.17s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.83s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00,  9.99s/it]100%|██████████| 4/4 [00:39<00:00,  9.91s/it]
[INFO 11-23 10:25:37] ax.service.ax_client: Completed trial 1 with data: {'mse': (52.288891, 0.0), 'compute_cost': (211.0102, 0.0)}.
[INFO 11-23 10:25:37] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.7850754469633102, 'sensor_std': 0.38075553476810453, 'integration_method': 'RK4'}
Best Values:  ({'mse': 52.28889083862305, 'compute_cost': 211.0102003606457}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:25:37] ax.service.ax_client: Generated new trial 2 with parameters {'dt': 0.195635, 'sensor_std': 1.625012, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:33, 11.07s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:24<00:25, 12.60s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:36<00:12, 12.15s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:48<00:00, 12.25s/it]100%|██████████| 4/4 [00:48<00:00, 12.19s/it]
[INFO 11-23 10:26:26] ax.service.ax_client: Completed trial 2 with data: {'mse': (2.574239, 0.0), 'compute_cost': (206.427461, 0.0)}.
[INFO 11-23 10:26:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:26:26] ax.service.ax_client: Generated new trial 3 with parameters {'dt': 0.216741, 'sensor_std': 9.491228, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:10<00:32, 10.71s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:24<00:24, 12.24s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:35<00:11, 11.80s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:47<00:00, 11.97s/it]100%|██████████| 4/4 [00:47<00:00, 11.88s/it]
[INFO 11-23 10:27:14] ax.service.ax_client: Completed trial 3 with data: {'mse': (29.773361, 0.0), 'compute_cost': (127.497728, 0.0)}.
[INFO 11-23 10:27:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:27:14] ax.service.ax_client: Generated new trial 4 with parameters {'dt': 0.393911, 'sensor_std': 4.304014, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:28,  9.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:21<00:21, 10.81s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:31<00:10, 10.42s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:41<00:00, 10.58s/it]100%|██████████| 4/4 [00:41<00:00, 10.49s/it]
[INFO 11-23 10:27:56] ax.service.ax_client: Completed trial 4 with data: {'mse': (27.255322, 0.0), 'compute_cost': (78.211917, 0.0)}.
[INFO 11-23 10:27:56] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:27:56] ax.service.ax_client: Generated new trial 5 with parameters {'dt': 1.291393, 'sensor_std': 0.963008, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:08<00:25,  8.61s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:19,  9.72s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:28<00:09,  9.40s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:37<00:00,  9.59s/it]100%|██████████| 4/4 [00:37<00:00,  9.50s/it]
[INFO 11-23 10:28:34] ax.service.ax_client: Completed trial 5 with data: {'mse': (69.211754, 0.0), 'compute_cost': (97.538325, 0.0)}.
[INFO 11-23 10:28:34] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:28:34] ax.service.ax_client: Generated new trial 6 with parameters {'dt': 0.600272, 'sensor_std': 3.513814, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:08<00:26,  8.88s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.12s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.79s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00,  9.95s/it]100%|██████████| 4/4 [00:39<00:00,  9.86s/it]
[INFO 11-23 10:29:13] ax.service.ax_client: Completed trial 6 with data: {'mse': (52.941143, 0.0), 'compute_cost': (53.500395, 0.0)}.
[INFO 11-23 10:29:13] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:29:14] ax.service.ax_client: Generated new trial 7 with parameters {'dt': 0.129274, 'sensor_std': 3.227513, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:37, 12.50s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:28, 14.38s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:41<00:13, 13.88s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:55<00:00, 14.10s/it]100%|██████████| 4/4 [00:55<00:00, 13.98s/it]
[INFO 11-23 10:30:10] ax.service.ax_client: Completed trial 7 with data: {'mse': (4.105012, 0.0), 'compute_cost': (253.306918, 0.0)}.
[INFO 11-23 10:30:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:30:10] ax.service.ax_client: Generated new trial 8 with parameters {'dt': 1.450681, 'sensor_std': 8.682029, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:08<00:25,  8.52s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:18<00:19,  9.63s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:27<00:09,  9.28s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:37<00:00,  9.40s/it]100%|██████████| 4/4 [00:37<00:00,  9.35s/it]
[INFO 11-23 10:30:47] ax.service.ax_client: Completed trial 8 with data: {'mse': (323.512634, 0.0), 'compute_cost': (36.451504, 0.0)}.
[INFO 11-23 10:30:47] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:30:47] ax.service.ax_client: Generated new trial 9 with parameters {'dt': 0.367089, 'sensor_std': 5.532003, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:09<00:29,  9.74s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:21<00:22, 11.09s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:32<00:10, 10.77s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:43<00:00, 10.93s/it]100%|██████████| 4/4 [00:43<00:00, 10.83s/it]
[INFO 11-23 10:31:30] ax.service.ax_client: Completed trial 9 with data: {'mse': (38.25219, 0.0), 'compute_cost': (148.517554, 0.0)}.
[INFO 11-23 10:31:30] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:31:30] ax.service.ax_client: Generated new trial 10 with parameters {'dt': 0.725827, 'sensor_std': 5.8653, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:09<00:27,  9.09s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:20, 10.22s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.88s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00, 10.08s/it]100%|██████████| 4/4 [00:39<00:00,  9.99s/it]
[INFO 11-23 10:32:10] ax.service.ax_client: Completed trial 10 with data: {'mse': (117.386497, 0.0), 'compute_cost': (143.646233, 0.0)}.
[INFO 11-23 10:32:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:32:10] ax.service.ax_client: Generated new trial 11 with parameters {'dt': 0.328135, 'sensor_std': 4.254772, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:28,  9.63s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:21<00:22, 11.08s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:31<00:10, 10.71s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:43<00:00, 10.88s/it]100%|██████████| 4/4 [00:43<00:00, 10.79s/it]
[INFO 11-23 10:32:54] ax.service.ax_client: Completed trial 11 with data: {'mse': (24.00964, 0.0), 'compute_cost': (94.094771, 0.0)}.
[INFO 11-23 10:32:54] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:32:54] ax.service.ax_client: Generated new trial 12 with parameters {'dt': 0.477193, 'sensor_std': 9.369965, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:09<00:28,  9.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:21, 10.66s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:30<00:10, 10.28s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:41<00:00, 10.41s/it]100%|██████████| 4/4 [00:41<00:00, 10.35s/it]
[INFO 11-23 10:33:35] ax.service.ax_client: Completed trial 12 with data: {'mse': (206.02005, 0.0), 'compute_cost': (110.370713, 0.0)}.
[INFO 11-23 10:33:35] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:33:35] ax.service.ax_client: Generated new trial 13 with parameters {'dt': 0.639266, 'sensor_std': 0.481407, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:08<00:26,  8.91s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.13s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.88s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00, 10.03s/it]100%|██████████| 4/4 [00:39<00:00,  9.93s/it]
[INFO 11-23 10:34:15] ax.service.ax_client: Completed trial 13 with data: {'mse': (16.401157, 0.0), 'compute_cost': (159.450123, 0.0)}.
[INFO 11-23 10:34:15] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:34:15] ax.service.ax_client: Generated new trial 14 with parameters {'dt': 0.892056, 'sensor_std': 5.642667, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:08<00:26,  8.89s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.04s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.72s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00,  9.92s/it]100%|██████████| 4/4 [00:39<00:00,  9.83s/it]
[INFO 11-23 10:34:54] ax.service.ax_client: Completed trial 14 with data: {'mse': (66.520813, 0.0), 'compute_cost': (117.067226, 0.0)}.
[INFO 11-23 10:34:54] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:34:54] ax.service.ax_client: Generated new trial 15 with parameters {'dt': 0.331633, 'sensor_std': 3.13127, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:29,  9.69s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:21<00:22, 11.04s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:31<00:10, 10.69s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:43<00:00, 10.85s/it]100%|██████████| 4/4 [00:43<00:00, 10.76s/it]
[INFO 11-23 10:35:37] ax.service.ax_client: Completed trial 15 with data: {'mse': (15.772972, 0.0), 'compute_cost': (99.459332, 0.0)}.
[INFO 11-23 10:35:37] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:35:37] ax.service.ax_client: Generated new trial 16 with parameters {'dt': 1.258027, 'sensor_std': 1.765345, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:08<00:25,  8.48s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:19,  9.71s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:27<00:09,  9.35s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:37<00:00,  9.44s/it]100%|██████████| 4/4 [00:37<00:00,  9.39s/it]
[INFO 11-23 10:36:15] ax.service.ax_client: Completed trial 16 with data: {'mse': (99.899338, 0.0), 'compute_cost': (51.001712, 0.0)}.
[INFO 11-23 10:36:15] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:36:15] ax.service.ax_client: Generated new trial 17 with parameters {'dt': 0.474845, 'sensor_std': 3.746217, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.23s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:21, 10.51s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:30<00:10, 10.18s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:40<00:00, 10.30s/it]100%|██████████| 4/4 [00:40<00:00, 10.23s/it]
[INFO 11-23 10:36:56] ax.service.ax_client: Completed trial 17 with data: {'mse': (46.503574, 0.0), 'compute_cost': (66.702579, 0.0)}.
[INFO 11-23 10:36:56] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:36:56] ax.service.ax_client: Generated new trial 18 with parameters {'dt': 0.677693, 'sensor_std': 7.352396, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:08<00:26,  8.71s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.00s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:28<00:09,  9.68s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:38<00:00,  9.84s/it]100%|██████████| 4/4 [00:38<00:00,  9.75s/it]
[INFO 11-23 10:37:35] ax.service.ax_client: Completed trial 18 with data: {'mse': (103.616562, 0.0), 'compute_cost': (41.907243, 0.0)}.
[INFO 11-23 10:37:35] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:37:35] ax.service.ax_client: Generated new trial 19 with parameters {'dt': 1.366619, 'sensor_std': 1.688888, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:08<00:26,  8.68s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:19,  9.74s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:28<00:09,  9.70s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:43<00:00, 11.62s/it]100%|██████████| 4/4 [00:43<00:00, 10.84s/it]
[INFO 11-23 10:38:19] ax.service.ax_client: Completed trial 19 with data: {'mse': (93.273216, 0.0), 'compute_cost': (84.004844, 0.0)}.
[INFO 11-23 10:38:19] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'mse': 2.574239492416382, 'compute_cost': 206.42746102687033}, {'mse': {'mse': 0.0}, 'compute_cost': {'compute_cost': 0.0}})
[INFO 11-23 10:38:59] ax.service.ax_client: Generated new trial 20 with parameters {'dt': 0.366204, 'sensor_std': 2.342063, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:11<00:34, 11.65s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:23, 11.92s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:34<00:11, 11.31s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:50<00:00, 13.33s/it]100%|██████████| 4/4 [00:50<00:00, 12.69s/it]
[INFO 11-23 10:39:50] ax.service.ax_client: Completed trial 20 with data: {'mse': (10.473711, 0.0), 'compute_cost': (165.68448, 0.0)}.
[INFO 11-23 10:39:50] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 206.4274929293034, 'mse': 2.574219855970753}, {'compute_cost': {'compute_cost': 0.003476766749291405, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0033599331473341803}})
[INFO 11-23 10:40:19] ax.service.ax_client: Generated new trial 21 with parameters {'dt': 0.136379, 'sensor_std': 2.25371, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:34, 11.62s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:26, 13.50s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:13, 13.25s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:57<00:00, 15.02s/it]100%|██████████| 4/4 [00:57<00:00, 14.28s/it]
[INFO 11-23 10:41:17] ax.service.ax_client: Completed trial 21 with data: {'mse': (8.789984, 0.0), 'compute_cost': (264.650957, 0.0)}.
[INFO 11-23 10:41:17] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 206.42827862050638, 'mse': 2.5745361707100756}, {'compute_cost': {'compute_cost': 0.004321314927172103, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0035271146383533208}})
[INFO 11-23 10:43:04] ax.service.ax_client: Generated new trial 22 with parameters {'dt': 0.244128, 'sensor_std': 1.623413, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.33s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:36<00:37, 18.84s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:53<00:18, 18.01s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:11<00:00, 18.05s/it]100%|██████████| 4/4 [01:11<00:00, 17.94s/it]
[INFO 11-23 10:44:16] ax.service.ax_client: Completed trial 22 with data: {'mse': (8.057351, 0.0), 'compute_cost': (165.48552, 0.0)}.
[INFO 11-23 10:44:16] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 206.42951681417532, 'mse': 2.575583882475925}, {'compute_cost': {'compute_cost': 0.004204833625557696, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.003513183463805104}})
[INFO 11-23 10:45:48] ax.service.ax_client: Generated new trial 23 with parameters {'dt': 0.176237, 'sensor_std': 3.141939, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.18s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:40, 20.29s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:17, 17.82s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:07<00:00, 15.96s/it]100%|██████████| 4/4 [01:07<00:00, 16.83s/it]
[INFO 11-23 10:46:55] ax.service.ax_client: Completed trial 23 with data: {'mse': (3.862199, 0.0), 'compute_cost': (187.003416, 0.0)}.
[INFO 11-23 10:46:55] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1956353195011616, 'sensor_std': 1.6250119455158711, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 206.42719731923987, 'mse': 2.5754243189209163}, {'compute_cost': {'compute_cost': 0.004186697063268187, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.003609050495330147}})
[INFO 11-23 10:47:17] ax.service.ax_client: Generated new trial 24 with parameters {'dt': 0.1, 'sensor_std': 0.613487, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.23s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:44<00:46, 23.20s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:06<00:22, 22.76s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:30<00:00, 23.48s/it]100%|██████████| 4/4 [01:30<00:00, 22.70s/it]
[INFO 11-23 10:48:48] ax.service.ax_client: Completed trial 24 with data: {'mse': (0.036324, 0.0), 'compute_cost': (657.506548, 0.0)}.
[INFO 11-23 10:48:48] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5058500848536, 'mse': 0.03637987300772494}, {'compute_cost': {'compute_cost': 0.015277151989566248, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.003498985763800527}})
[INFO 11-23 10:52:20] ax.service.ax_client: Generated new trial 25 with parameters {'dt': 0.158976, 'sensor_std': 0.772549, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:36, 12.03s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:27, 13.70s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:44<00:15, 15.65s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:05<00:00, 17.64s/it]100%|██████████| 4/4 [01:05<00:00, 16.39s/it]
[INFO 11-23 10:53:26] ax.service.ax_client: Completed trial 25 with data: {'mse': (0.538815, 0.0), 'compute_cost': (360.812821, 0.0)}.
[INFO 11-23 10:53:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5056173825465, 'mse': 0.036586959682743725}, {'compute_cost': {'compute_cost': 0.01640686150747349, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0035122344137100826}})
[INFO 11-23 10:57:35] ax.service.ax_client: Generated new trial 26 with parameters {'dt': 0.121409, 'sensor_std': 0.932438, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:57, 19.01s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:45<00:47, 23.56s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:07<00:22, 22.70s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:31<00:00, 23.17s/it]100%|██████████| 4/4 [01:31<00:00, 22.83s/it]
[INFO 11-23 10:59:06] ax.service.ax_client: Completed trial 26 with data: {'mse': (0.52774, 0.0), 'compute_cost': (426.750844, 0.0)}.
[INFO 11-23 10:59:06] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5054517188912, 'mse': 0.0365249619779604}, {'compute_cost': {'compute_cost': 0.018485866984620153, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.003498108160371325}})
[INFO 11-23 11:01:50] ax.service.ax_client: Generated new trial 27 with parameters {'dt': 0.121781, 'sensor_std': 1.014631, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:56, 18.87s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:43, 21.88s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:19, 19.92s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:19<00:00, 19.48s/it]100%|██████████| 4/4 [01:19<00:00, 19.81s/it]
[INFO 11-23 11:03:10] ax.service.ax_client: Completed trial 27 with data: {'mse': (6.940153, 0.0), 'compute_cost': (407.614082, 0.0)}.
[INFO 11-23 11:03:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.505231745145, 'mse': 0.03629007979846932}, {'compute_cost': {'compute_cost': 0.019881476370580874, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0034643281627333568}})
[INFO 11-23 11:05:57] ax.service.ax_client: Generated new trial 28 with parameters {'dt': 0.1, 'sensor_std': 1.808093, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.60s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.49s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:09<00:23, 23.28s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:33<00:00, 23.67s/it]100%|██████████| 4/4 [01:33<00:00, 23.48s/it]
[INFO 11-23 11:07:31] ax.service.ax_client: Completed trial 28 with data: {'mse': (0.664916, 0.0), 'compute_cost': (388.267197, 0.0)}.
[INFO 11-23 11:07:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5049582452891, 'mse': 0.0362943131001785}, {'compute_cost': {'compute_cost': 0.02074141122007646, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0023783395485839944}})
[INFO 11-23 11:09:59] ax.service.ax_client: Generated new trial 29 with parameters {'dt': 0.1, 'sensor_std': 2.84816, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:41, 13.81s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:32, 16.30s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:53<00:18, 18.73s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:17<00:00, 20.98s/it]100%|██████████| 4/4 [01:17<00:00, 19.48s/it]
[INFO 11-23 11:11:17] ax.service.ax_client: Completed trial 29 with data: {'mse': (10.127598, 0.0), 'compute_cost': (337.775965, 0.0)}.
[INFO 11-23 11:11:17] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.504828733254, 'mse': 0.03625626501160184}, {'compute_cost': {'compute_cost': 0.020832495799462926, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.002338166047772878}})
[INFO 11-23 11:14:58] ax.service.ax_client: Generated new trial 30 with parameters {'dt': 0.1, 'sensor_std': 0.787416, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:46<00:47, 23.68s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:08<00:22, 22.78s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:32<00:00, 23.42s/it]100%|██████████| 4/4 [01:32<00:00, 23.13s/it]
[INFO 11-23 11:16:31] ax.service.ax_client: Completed trial 30 with data: {'mse': (0.170715, 0.0), 'compute_cost': (567.494257, 0.0)}.
[INFO 11-23 11:16:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5044776339003, 'mse': 0.03676341041516196}, {'compute_cost': {'compute_cost': 0.024796498931886724, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.002392202683721967}})
[INFO 11-23 11:24:51] ax.service.ax_client: Generated new trial 31 with parameters {'dt': 0.141763, 'sensor_std': 0.503544, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:40, 13.62s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:37<00:39, 19.63s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:56<00:19, 19.44s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:17<00:00, 20.17s/it]100%|██████████| 4/4 [01:17<00:00, 19.49s/it]
[INFO 11-23 11:26:09] ax.service.ax_client: Completed trial 31 with data: {'mse': (1.425188, 0.0), 'compute_cost': (526.571243, 0.0)}.
[INFO 11-23 11:26:09] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5032441011152, 'mse': 0.03709573422145951}, {'compute_cost': {'compute_cost': 0.02733391461793801, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0023749307298731783}})
[INFO 11-23 11:32:44] ax.service.ax_client: Generated new trial 32 with parameters {'dt': 0.1, 'sensor_std': 1.653684, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.52s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.35s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:09<00:23, 23.23s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:33<00:00, 23.64s/it]100%|██████████| 4/4 [01:33<00:00, 23.43s/it]
[INFO 11-23 11:34:18] ax.service.ax_client: Completed trial 32 with data: {'mse': (0.715469, 0.0), 'compute_cost': (401.177583, 0.0)}.
[INFO 11-23 11:34:18] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5026963459322, 'mse': 0.037120688160868553}, {'compute_cost': {'compute_cost': 0.02758745155124642, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.002248456149024784}})
[INFO 11-23 11:36:49] ax.service.ax_client: Generated new trial 33 with parameters {'dt': 0.119994, 'sensor_std': 0.669283, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.52s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:42, 21.48s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:01<00:21, 21.03s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:24<00:00, 21.69s/it]100%|██████████| 4/4 [01:24<00:00, 21.17s/it]
[INFO 11-23 11:38:14] ax.service.ax_client: Completed trial 33 with data: {'mse': (0.513465, 0.0), 'compute_cost': (519.636567, 0.0)}.
[INFO 11-23 11:38:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4996186976407, 'mse': 0.03683819864689042}, {'compute_cost': {'compute_cost': 0.02946796986260437, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0022534026850440313}})
[INFO 11-23 11:45:24] ax.service.ax_client: Generated new trial 34 with parameters {'dt': 0.138458, 'sensor_std': 0.688706, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:54, 18.24s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:42, 21.48s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:20, 20.33s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:20<00:00, 19.85s/it]100%|██████████| 4/4 [01:20<00:00, 20.02s/it]
[INFO 11-23 11:46:44] ax.service.ax_client: Completed trial 34 with data: {'mse': (2.948103, 0.0), 'compute_cost': (442.734753, 0.0)}.
[INFO 11-23 11:46:44] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.498149502273, 'mse': 0.03375514268714852}, {'compute_cost': {'compute_cost': 0.029958061502028167, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0022257777460264324}})
[INFO 11-23 11:52:51] ax.service.ax_client: Generated new trial 35 with parameters {'dt': 0.159897, 'sensor_std': 0.1, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:52, 17.44s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:40<00:40, 20.48s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:58<00:19, 19.51s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:18<00:00, 19.78s/it]100%|██████████| 4/4 [01:18<00:00, 19.65s/it]
[INFO 11-23 11:54:10] ax.service.ax_client: Completed trial 35 with data: {'mse': (12.841393, 0.0), 'compute_cost': (1719.857574, 0.0)}.
[INFO 11-23 11:54:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4981458552027, 'mse': 0.033804995738940136}, {'compute_cost': {'compute_cost': 0.08184190867016101, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.002180038213168329}})
[INFO 11-23 12:00:41] ax.service.ax_client: Generated new trial 36 with parameters {'dt': 0.191996, 'sensor_std': 0.929251, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:33, 11.01s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:32, 16.14s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:16, 16.74s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:07<00:00, 17.85s/it]100%|██████████| 4/4 [01:07<00:00, 16.94s/it]
[INFO 11-23 12:01:49] ax.service.ax_client: Completed trial 36 with data: {'mse': (2.418794, 0.0), 'compute_cost': (270.335262, 0.0)}.
[INFO 11-23 12:01:49] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4975746949455, 'mse': 0.03446268711918776}, {'compute_cost': {'compute_cost': 0.07918379314533863, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0017389274703474037}})
[INFO 11-23 12:13:17] ax.service.ax_client: Generated new trial 37 with parameters {'dt': 0.152538, 'sensor_std': 1.786664, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:55, 18.51s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:42, 21.07s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:59<00:19, 19.91s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:20<00:00, 20.36s/it]100%|██████████| 4/4 [01:20<00:00, 20.24s/it]
[INFO 11-23 12:14:38] ax.service.ax_client: Completed trial 37 with data: {'mse': (2.290272, 0.0), 'compute_cost': (255.625962, 0.0)}.
[INFO 11-23 12:14:38] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4971079325574, 'mse': 0.034360852065027814}, {'compute_cost': {'compute_cost': 0.07704742119169115, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0017219085226762773}})
[INFO 11-23 12:25:07] ax.service.ax_client: Generated new trial 38 with parameters {'dt': 0.134757, 'sensor_std': 1.724618, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:55, 18.48s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:43, 21.70s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:01<00:20, 20.61s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:23<00:00, 21.08s/it]100%|██████████| 4/4 [01:23<00:00, 20.88s/it]
[INFO 11-23 12:26:30] ax.service.ax_client: Completed trial 38 with data: {'mse': (1.673864, 0.0), 'compute_cost': (293.091275, 0.0)}.
[INFO 11-23 12:26:30] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4966448425355, 'mse': 0.03430793405948407}, {'compute_cost': {'compute_cost': 0.07503419097545377, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0017050704389882914}})
[INFO 11-23 12:34:00] ax.service.ax_client: Generated new trial 39 with parameters {'dt': 0.107614, 'sensor_std': 1.781651, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.11s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:46<00:47, 23.78s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:07<00:22, 22.62s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:31<00:00, 23.04s/it]100%|██████████| 4/4 [01:31<00:00, 22.84s/it]
[INFO 11-23 12:35:31] ax.service.ax_client: Completed trial 39 with data: {'mse': (4.087525, 0.0), 'compute_cost': (362.704445, 0.0)}.
[INFO 11-23 12:35:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4959242638297, 'mse': 0.035178518577559714}, {'compute_cost': {'compute_cost': 0.07332687595325033, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.001682795341649118}})
[INFO 11-23 12:50:09] ax.service.ax_client: Generated new trial 40 with parameters {'dt': 0.1, 'sensor_std': 1.979341, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.58s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.46s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:09<00:23, 23.41s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:34<00:00, 23.84s/it]100%|██████████| 4/4 [01:34<00:00, 23.60s/it]
[INFO 11-23 12:51:43] ax.service.ax_client: Completed trial 40 with data: {'mse': (0.385331, 0.0), 'compute_cost': (376.304658, 0.0)}.
[INFO 11-23 12:51:43] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4958978907464, 'mse': 0.03536464680753326}, {'compute_cost': {'compute_cost': 0.0715689045826213, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0016499249302752452}})
[INFO 11-23 13:07:43] ax.service.ax_client: Generated new trial 41 with parameters {'dt': 0.1, 'sensor_std': 1.887582, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:52, 17.54s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:44<00:45, 22.89s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:06<00:22, 22.46s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:30<00:00, 23.26s/it]100%|██████████| 4/4 [01:30<00:00, 22.66s/it]
[INFO 11-23 13:09:13] ax.service.ax_client: Completed trial 41 with data: {'mse': (8.221425, 0.0), 'compute_cost': (382.444598, 0.0)}.
[INFO 11-23 13:09:13] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.496373682636, 'mse': 0.03596191153895134}, {'compute_cost': {'compute_cost': 0.07010236301575928, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0016227745531907432}})
[INFO 11-23 13:27:53] ax.service.ax_client: Generated new trial 42 with parameters {'dt': 0.1, 'sensor_std': 2.090754, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.01s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:32, 16.44s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:16, 16.20s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:12<00:00, 19.24s/it]100%|██████████| 4/4 [01:12<00:00, 18.06s/it]
[INFO 11-23 13:29:05] ax.service.ax_client: Completed trial 42 with data: {'mse': (0.44414, 0.0), 'compute_cost': (369.574098, 0.0)}.
[INFO 11-23 13:29:05] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4960337691969, 'mse': 0.03596018262425815}, {'compute_cost': {'compute_cost': 0.06863260255216544, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0016143082103209395}})
[INFO 11-23 13:40:38] ax.service.ax_client: Generated new trial 43 with parameters {'dt': 0.172793, 'sensor_std': 2.040498, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.24s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:37<00:37, 18.97s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:55<00:18, 18.49s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:15<00:00, 19.17s/it]100%|██████████| 4/4 [01:15<00:00, 18.81s/it]
[INFO 11-23 13:41:54] ax.service.ax_client: Completed trial 43 with data: {'mse': (6.863272, 0.0), 'compute_cost': (215.587088, 0.0)}.
[INFO 11-23 13:41:54] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4956672177434, 'mse': 0.03596730121201119}, {'compute_cost': {'compute_cost': 0.0671264156530102, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0015891921114972879}})
[INFO 11-23 13:55:18] ax.service.ax_client: Generated new trial 44 with parameters {'dt': 0.161926, 'sensor_std': 0.843526, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:34, 11.53s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:32, 16.07s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:17, 17.05s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 18.57s/it]100%|██████████| 4/4 [01:09<00:00, 17.48s/it]
[INFO 11-23 13:56:28] ax.service.ax_client: Completed trial 44 with data: {'mse': (1.872389, 0.0), 'compute_cost': (337.423609, 0.0)}.
[INFO 11-23 13:56:28] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4949322647244, 'mse': 0.03599057330369959}, {'compute_cost': {'compute_cost': 0.0647014697846292, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.001431203601900669}})
[INFO 11-23 14:14:03] ax.service.ax_client: Generated new trial 45 with parameters {'dt': 0.1, 'sensor_std': 2.037723, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 20.69s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:48<00:49, 24.83s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:10<00:23, 23.79s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:39<00:00, 25.65s/it]100%|██████████| 4/4 [01:39<00:00, 24.87s/it]
[INFO 11-23 14:15:42] ax.service.ax_client: Completed trial 45 with data: {'mse': (1.43499, 0.0), 'compute_cost': (372.685971, 0.0)}.
[INFO 11-23 14:15:42] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.494739561683, 'mse': 0.03600718423867022}, {'compute_cost': {'compute_cost': 0.06345583893460714, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.001418562121852452}})
[INFO 11-23 14:31:47] ax.service.ax_client: Generated new trial 46 with parameters {'dt': 0.1, 'sensor_std': 2.13273, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 20.70s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:46<00:47, 23.90s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:21, 21.21s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:25<00:00, 21.00s/it]100%|██████████| 4/4 [01:25<00:00, 21.38s/it]
[INFO 11-23 14:33:13] ax.service.ax_client: Completed trial 46 with data: {'mse': (0.908156, 0.0), 'compute_cost': (367.220673, 0.0)}.
[INFO 11-23 14:33:13] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4945236577114, 'mse': 0.03599464511468753}, {'compute_cost': {'compute_cost': 0.06223555568300004, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0014071410644834663}})
[INFO 11-23 14:49:50] ax.service.ax_client: Generated new trial 47 with parameters {'dt': 0.1, 'sensor_std': 3.032446, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:21<01:04, 21.59s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:49<00:50, 25.28s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:11<00:23, 23.72s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:35<00:00, 24.05s/it]100%|██████████| 4/4 [01:35<00:00, 23.97s/it]
[INFO 11-23 14:51:26] ax.service.ax_client: Completed trial 47 with data: {'mse': (1.395569, 0.0), 'compute_cost': (332.44169, 0.0)}.
[INFO 11-23 14:51:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4944513812814, 'mse': 0.03598416770803681}, {'compute_cost': {'compute_cost': 0.06096321890268738, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0013912737296287675}})
[INFO 11-23 15:07:40] ax.service.ax_client: Generated new trial 48 with parameters {'dt': 0.1, 'sensor_std': 2.074905, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.23s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.15s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:09<00:23, 23.49s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:33<00:00, 23.58s/it]100%|██████████| 4/4 [01:33<00:00, 23.39s/it]
[INFO 11-23 15:09:14] ax.service.ax_client: Completed trial 48 with data: {'mse': (0.713869, 0.0), 'compute_cost': (370.48747, 0.0)}.
[INFO 11-23 15:09:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4946522601223, 'mse': 0.036035883800760615}, {'compute_cost': {'compute_cost': 0.05930656979461952, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0011160561091998129}})
[INFO 11-23 15:23:59] ax.service.ax_client: Generated new trial 49 with parameters {'dt': 0.1, 'sensor_std': 3.112631, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.21s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:37<00:37, 18.75s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:52<00:17, 17.01s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:10<00:00, 17.19s/it]100%|██████████| 4/4 [01:10<00:00, 17.59s/it]
[INFO 11-23 15:25:10] ax.service.ax_client: Completed trial 49 with data: {'mse': (2.29381, 0.0), 'compute_cost': (330.317904, 0.0)}.
[INFO 11-23 15:25:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4944762069154, 'mse': 0.03603049823248483}, {'compute_cost': {'compute_cost': 0.05813682343043502, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0011031528611424811}})
[INFO 11-23 15:47:29] ax.service.ax_client: Generated new trial 50 with parameters {'dt': 0.1, 'sensor_std': 2.087384, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.48s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:39, 19.73s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:17, 17.27s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:10<00:00, 16.89s/it]100%|██████████| 4/4 [01:10<00:00, 17.58s/it]
[INFO 11-23 15:48:39] ax.service.ax_client: Completed trial 50 with data: {'mse': (3.290918, 0.0), 'compute_cost': (369.767154, 0.0)}.
[INFO 11-23 15:48:39] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4946843841336, 'mse': 0.03634561902379829}, {'compute_cost': {'compute_cost': 0.05711253268546467, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0010896214909156287}})
[INFO 11-23 15:57:30] ax.service.ax_client: Generated new trial 51 with parameters {'dt': 0.12869, 'sensor_std': 0.552673, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:56, 18.84s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.35s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:11<00:24, 24.20s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:28<00:00, 21.70s/it]100%|██████████| 4/4 [01:28<00:00, 22.23s/it]
[INFO 11-23 15:58:59] ax.service.ax_client: Completed trial 51 with data: {'mse': (0.415327, 0.0), 'compute_cost': (545.766689, 0.0)}.
[INFO 11-23 15:58:59] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4972788478054, 'mse': 0.03634052163215529}, {'compute_cost': {'compute_cost': 0.0572618244683058, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0010793834747220908}})
[INFO 11-23 16:07:45] ax.service.ax_client: Generated new trial 52 with parameters {'dt': 0.1, 'sensor_std': 2.110125, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:55, 18.63s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:38, 19.26s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:53<00:17, 17.39s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:16<00:00, 19.79s/it]100%|██████████| 4/4 [01:16<00:00, 19.24s/it]
[INFO 11-23 16:09:02] ax.service.ax_client: Completed trial 52 with data: {'mse': (1.087093, 0.0), 'compute_cost': (368.476388, 0.0)}.
[INFO 11-23 16:09:02] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4975328167059, 'mse': 0.03634102605627376}, {'compute_cost': {'compute_cost': 0.055504263607020425, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0007174357727871805}})
[INFO 11-23 16:16:16] ax.service.ax_client: Generated new trial 53 with parameters {'dt': 0.1, 'sensor_std': 2.059645, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.60s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:49, 24.59s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:10<00:23, 23.45s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:34<00:00, 23.94s/it]100%|██████████| 4/4 [01:34<00:00, 23.69s/it]
[INFO 11-23 16:17:51] ax.service.ax_client: Completed trial 53 with data: {'mse': (0.94345, 0.0), 'compute_cost': (371.380156, 0.0)}.
[INFO 11-23 16:17:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.497686205821, 'mse': 0.036341329226207364}, {'compute_cost': {'compute_cost': 0.054569330795044994, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0007170940111652553}})
[INFO 11-23 16:26:45] ax.service.ax_client: Generated new trial 54 with parameters {'dt': 0.1, 'sensor_std': 2.007224, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:58, 19.66s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:39, 19.51s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:20, 20.19s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:17<00:00, 18.96s/it]100%|██████████| 4/4 [01:17<00:00, 19.29s/it]
[INFO 11-23 16:28:02] ax.service.ax_client: Completed trial 54 with data: {'mse': (0.363072, 0.0), 'compute_cost': (374.550138, 0.0)}.
[INFO 11-23 16:28:02] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4978348589624, 'mse': 0.036341245546729795}, {'compute_cost': {'compute_cost': 0.05367359051767968, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0007136138795187918}})
[INFO 11-23 16:34:14] ax.service.ax_client: Generated new trial 55 with parameters {'dt': 0.130466, 'sensor_std': 0.966987, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:57, 19.09s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:44<00:45, 22.87s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:21, 21.54s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:28<00:00, 22.29s/it]100%|██████████| 4/4 [01:28<00:00, 22.00s/it]
[INFO 11-23 16:35:42] ax.service.ax_client: Completed trial 55 with data: {'mse': (0.963602, 0.0), 'compute_cost': (389.782276, 0.0)}.
[INFO 11-23 16:35:42] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4975567012083, 'mse': 0.03634115940187854}, {'compute_cost': {'compute_cost': 0.052850317532653124, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0007067024303438312}})
[INFO 11-23 16:46:25] ax.service.ax_client: Generated new trial 56 with parameters {'dt': 0.1, 'sensor_std': 3.183617, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 20.85s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:48<00:49, 24.83s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:10<00:23, 23.41s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:26<00:00, 20.47s/it]100%|██████████| 4/4 [01:26<00:00, 21.54s/it]
[INFO 11-23 16:47:51] ax.service.ax_client: Completed trial 56 with data: {'mse': (1.82777, 0.0), 'compute_cost': (328.527043, 0.0)}.
[INFO 11-23 16:47:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.49801500246, 'mse': 0.03634056483200965}, {'compute_cost': {'compute_cost': 0.05084330360523549, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0006133813414518782}})
[INFO 11-23 16:50:19] ax.service.ax_client: Generated new trial 57 with parameters {'dt': 0.1, 'sensor_std': 3.067631, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.35s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:49, 24.63s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:10<00:23, 23.53s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:38<00:00, 25.34s/it]100%|██████████| 4/4 [01:38<00:00, 24.58s/it]
[INFO 11-23 16:51:58] ax.service.ax_client: Completed trial 57 with data: {'mse': (4.224567, 0.0), 'compute_cost': (331.496116, 0.0)}.
[INFO 11-23 16:51:58] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4982233557738, 'mse': 0.0363405110275572}, {'compute_cost': {'compute_cost': 0.04996965090512901, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0006058626681425421}})
[INFO 11-23 16:59:04] ax.service.ax_client: Generated new trial 58 with parameters {'dt': 0.317146, 'sensor_std': 0.638439, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:43, 14.61s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:34, 17.27s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:49<00:16, 16.58s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:07<00:00, 16.99s/it]100%|██████████| 4/4 [01:07<00:00, 16.78s/it]
[INFO 11-23 17:00:11] ax.service.ax_client: Completed trial 58 with data: {'mse': (19.992973, 0.0), 'compute_cost': (202.298186, 0.0)}.
[INFO 11-23 17:00:11] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4974490607401, 'mse': 0.036358163648095854}, {'compute_cost': {'compute_cost': 0.04926451100613924, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0005955054297136445}})
[INFO 11-23 17:00:35] ax.service.ax_client: Generated new trial 59 with parameters {'dt': 0.1, 'sensor_std': 0.586548, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:39, 13.05s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:31, 15.95s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:50<00:17, 17.73s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:15<00:00, 20.40s/it]100%|██████████| 4/4 [01:15<00:00, 18.84s/it]
[INFO 11-23 17:01:51] ax.service.ax_client: Completed trial 59 with data: {'mse': (0.102207, 0.0), 'compute_cost': (676.222803, 0.0)}.
[INFO 11-23 17:01:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4650867730941, 'mse': 0.036359537856942126}, {'compute_cost': {'compute_cost': 0.0501418379591199, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00059100017667375}})
[INFO 11-23 17:13:07] ax.service.ax_client: Generated new trial 60 with parameters {'dt': 0.1, 'sensor_std': 2.163995, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:50, 16.68s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:46<00:48, 24.43s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:15<00:26, 26.42s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:45<00:00, 28.05s/it]100%|██████████| 4/4 [01:45<00:00, 26.47s/it]
[INFO 11-23 17:14:53] ax.service.ax_client: Completed trial 60 with data: {'mse': (1.914204, 0.0), 'compute_cost': (365.527081, 0.0)}.
[INFO 11-23 17:14:53] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4648261429786, 'mse': 0.036354786962107255}, {'compute_cost': {'compute_cost': 0.049045990908128015, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00047291932118224614}})
[INFO 11-23 17:20:21] ax.service.ax_client: Generated new trial 61 with parameters {'dt': 0.1, 'sensor_std': 2.099398, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:56, 18.93s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:41, 20.78s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:21, 21.95s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:29<00:00, 23.12s/it]100%|██████████| 4/4 [01:29<00:00, 22.32s/it]
[INFO 11-23 17:21:50] ax.service.ax_client: Completed trial 61 with data: {'mse': (0.466895, 0.0), 'compute_cost': (369.081769, 0.0)}.
[INFO 11-23 17:21:50] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4653765414778, 'mse': 0.0363508131881467}, {'compute_cost': {'compute_cost': 0.04831699950016561, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0004694393092482373}})
[INFO 11-23 17:23:31] ax.service.ax_client: Generated new trial 62 with parameters {'dt': 0.375966, 'sensor_std': 2.123217, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:10<00:30, 10.03s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:27, 14.00s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:13, 13.29s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:56<00:00, 14.91s/it]100%|██████████| 4/4 [00:56<00:00, 14.16s/it]
[INFO 11-23 17:24:28] ax.service.ax_client: Completed trial 62 with data: {'mse': (18.637991, 0.0), 'compute_cost': (97.813575, 0.0)}.
[INFO 11-23 17:24:28] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4640435587223, 'mse': 0.036350092874346984}, {'compute_cost': {'compute_cost': 0.04849187439831521, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00046199998562384165}})
[INFO 11-23 17:29:43] ax.service.ax_client: Generated new trial 63 with parameters {'dt': 0.297976, 'sensor_std': 0.815055, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:44, 14.77s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:34, 17.34s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:49<00:16, 16.61s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:05<00:00, 16.37s/it]100%|██████████| 4/4 [01:05<00:00, 16.42s/it]
[INFO 11-23 17:30:49] ax.service.ax_client: Completed trial 63 with data: {'mse': (11.371597, 0.0), 'compute_cost': (186.836164, 0.0)}.
[INFO 11-23 17:30:49] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4611950645312, 'mse': 0.036350123706943904}, {'compute_cost': {'compute_cost': 0.04791488834873848, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.000454972685017609}})
[INFO 11-23 17:36:31] ax.service.ax_client: Generated new trial 64 with parameters {'dt': 0.160456, 'sensor_std': 0.527165, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.45s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:30, 15.34s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:43<00:14, 14.10s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:59<00:00, 14.62s/it]100%|██████████| 4/4 [00:59<00:00, 14.77s/it]
[INFO 11-23 17:37:31] ax.service.ax_client: Completed trial 64 with data: {'mse': (27.715221, 0.0), 'compute_cost': (451.360044, 0.0)}.
[INFO 11-23 17:37:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4882058038588, 'mse': 0.036351530594844306}, {'compute_cost': {'compute_cost': 0.04704384417204512, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00044971158342144325}})
[INFO 11-23 17:40:53] ax.service.ax_client: Generated new trial 65 with parameters {'dt': 0.117729, 'sensor_std': 0.485738, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:58, 19.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:45<00:46, 23.22s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:59<00:19, 19.11s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:14<00:00, 17.66s/it]100%|██████████| 4/4 [01:14<00:00, 18.74s/it]
[INFO 11-23 17:42:08] ax.service.ax_client: Completed trial 65 with data: {'mse': (0.454512, 0.0), 'compute_cost': (649.525715, 0.0)}.
[INFO 11-23 17:42:08] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5225993693018, 'mse': 0.0363518345941074}, {'compute_cost': {'compute_cost': 0.04747587891778003, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0004467706581686863}})
[INFO 11-23 17:42:56] ax.service.ax_client: Generated new trial 66 with parameters {'dt': 0.1, 'sensor_std': 3.161946, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 21.00s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.05s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:02<00:19, 19.91s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:18<00:00, 18.38s/it]100%|██████████| 4/4 [01:18<00:00, 19.55s/it]
[INFO 11-23 17:44:14] ax.service.ax_client: Completed trial 66 with data: {'mse': (3.250017, 0.0), 'compute_cost': (329.065235, 0.0)}.
[INFO 11-23 17:44:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5238674655078, 'mse': 0.03635218469044865}, {'compute_cost': {'compute_cost': 0.04672200891302997, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.000442306784764758}})
[INFO 11-23 17:47:11] ax.service.ax_client: Generated new trial 67 with parameters {'dt': 0.160226, 'sensor_std': 0.94757, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:51, 17.19s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:36<00:37, 18.70s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:49<00:15, 15.95s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:03<00:00, 15.05s/it]100%|██████████| 4/4 [01:03<00:00, 15.83s/it]
[INFO 11-23 17:48:14] ax.service.ax_client: Completed trial 67 with data: {'mse': (6.759634, 0.0), 'compute_cost': (320.691504, 0.0)}.
[INFO 11-23 17:48:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.523598395919, 'mse': 0.03635192450246194}, {'compute_cost': {'compute_cost': 0.04596220908449448, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0004368267781999783}})
[INFO 11-23 17:51:58] ax.service.ax_client: Generated new trial 68 with parameters {'dt': 0.1, 'sensor_std': 0.565933, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:44, 14.84s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:43, 21.79s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:22, 22.12s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:28<00:00, 23.21s/it]100%|██████████| 4/4 [01:28<00:00, 22.22s/it]
[INFO 11-23 17:53:27] ax.service.ax_client: Completed trial 68 with data: {'mse': (0.152353, 0.0), 'compute_cost': (691.748164, 0.0)}.
[INFO 11-23 17:53:27] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4462906337185, 'mse': 0.03634347225077761}, {'compute_cost': {'compute_cost': 0.04434977410632285, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00032105888707586994}})
[INFO 11-23 17:54:48] ax.service.ax_client: Generated new trial 69 with parameters {'dt': 0.1, 'sensor_std': 1.698618, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.23s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:48<00:49, 24.68s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:10<00:23, 23.46s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:34<00:00, 23.94s/it]100%|██████████| 4/4 [01:34<00:00, 23.68s/it]
[INFO 11-23 17:56:23] ax.service.ax_client: Completed trial 69 with data: {'mse': (0.251554, 0.0), 'compute_cost': (397.178461, 0.0)}.
[INFO 11-23 17:56:23] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4484609310811, 'mse': 0.03634346826963508}, {'compute_cost': {'compute_cost': 0.04368122183056951, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0003195879055899083}})
[INFO 11-23 17:57:35] ax.service.ax_client: Generated new trial 70 with parameters {'dt': 0.1, 'sensor_std': 0.90769, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.95s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:42, 21.12s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:03<00:21, 21.28s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:28<00:00, 22.64s/it]100%|██████████| 4/4 [01:28<00:00, 22.02s/it]
[INFO 11-23 17:59:03] ax.service.ax_client: Completed trial 70 with data: {'mse': (0.10174, 0.0), 'compute_cost': (525.424449, 0.0)}.
[INFO 11-23 17:59:03] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4521821951805, 'mse': 0.03634356978462705}, {'compute_cost': {'compute_cost': 0.043490598316833724, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00032077862116767423}})
[INFO 11-23 18:00:19] ax.service.ax_client: Generated new trial 71 with parameters {'dt': 0.1, 'sensor_std': 0.986423, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:39, 13.28s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:33, 16.78s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:15, 15.77s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:03<00:00, 16.21s/it]100%|██████████| 4/4 [01:03<00:00, 15.99s/it]
[INFO 11-23 18:01:23] ax.service.ax_client: Completed trial 71 with data: {'mse': (0.143448, 0.0), 'compute_cost': (503.44102, 0.0)}.
[INFO 11-23 18:01:23] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4568287839635, 'mse': 0.036343658891649255}, {'compute_cost': {'compute_cost': 0.04316109004869091, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00031872365212059426}})
[INFO 11-23 18:05:19] ax.service.ax_client: Generated new trial 72 with parameters {'dt': 0.1, 'sensor_std': 0.87137, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.56s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:43, 21.56s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:21, 21.60s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:28<00:00, 22.75s/it]100%|██████████| 4/4 [01:28<00:00, 22.25s/it]
[INFO 11-23 18:06:48] ax.service.ax_client: Completed trial 72 with data: {'mse': (0.132783, 0.0), 'compute_cost': (536.90442, 0.0)}.
[INFO 11-23 18:06:48] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4600002665761, 'mse': 0.03634235495694149}, {'compute_cost': {'compute_cost': 0.04258626153641643, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002800712376798654}})
[INFO 11-23 18:09:07] ax.service.ax_client: Generated new trial 73 with parameters {'dt': 0.323101, 'sensor_std': 0.864875, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.08s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:25<00:26, 13.27s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:45<00:16, 16.40s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:02<00:00, 16.72s/it]100%|██████████| 4/4 [01:02<00:00, 15.66s/it]
[INFO 11-23 18:10:10] ax.service.ax_client: Completed trial 73 with data: {'mse': (8.785126, 0.0), 'compute_cost': (166.839407, 0.0)}.
[INFO 11-23 18:10:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4591859891116, 'mse': 0.03634250265950989}, {'compute_cost': {'compute_cost': 0.04225447809929795, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002764213189386865}})
[INFO 11-23 18:16:13] ax.service.ax_client: Generated new trial 74 with parameters {'dt': 0.280275, 'sensor_std': 3.203795, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.10s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:31, 15.80s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:42<00:13, 13.56s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:54<00:00, 13.06s/it]100%|██████████| 4/4 [00:54<00:00, 13.64s/it]
[INFO 11-23 18:17:08] ax.service.ax_client: Completed trial 74 with data: {'mse': (10.735393, 0.0), 'compute_cost': (117.039377, 0.0)}.
[INFO 11-23 18:17:08] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4578164688287, 'mse': 0.03634248997717293}, {'compute_cost': {'compute_cost': 0.042426095960635984, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00027272516834939836}})
[INFO 11-23 18:17:38] ax.service.ax_client: Generated new trial 75 with parameters {'dt': 0.204811, 'sensor_std': 1.990719, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.18s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:36<00:37, 18.94s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:18, 18.21s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:13<00:00, 18.69s/it]100%|██████████| 4/4 [01:13<00:00, 18.38s/it]
[INFO 11-23 18:18:52] ax.service.ax_client: Completed trial 75 with data: {'mse': (2.904765, 0.0), 'compute_cost': (183.380323, 0.0)}.
[INFO 11-23 18:18:52] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4573646919159, 'mse': 0.03634280532211953}, {'compute_cost': {'compute_cost': 0.04202427319622651, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.000270282322211222}})
[INFO 11-23 18:21:39] ax.service.ax_client: Generated new trial 76 with parameters {'dt': 0.1, 'sensor_std': 1.634034, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 20.99s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:48<00:49, 24.54s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:03<00:20, 20.24s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:21<00:00, 19.59s/it]100%|██████████| 4/4 [01:21<00:00, 20.43s/it]
[INFO 11-23 18:23:01] ax.service.ax_client: Completed trial 76 with data: {'mse': (1.261612, 0.0), 'compute_cost': (402.995613, 0.0)}.
[INFO 11-23 18:23:01] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4594282139706, 'mse': 0.036339748504467195}, {'compute_cost': {'compute_cost': 0.04120287059114947, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00021353738602262825}})
[INFO 11-23 18:26:15] ax.service.ax_client: Generated new trial 77 with parameters {'dt': 0.267303, 'sensor_std': 0.56519, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:10<00:30, 10.16s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:23, 11.89s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:38<00:13, 13.61s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:57<00:00, 15.53s/it]100%|██████████| 4/4 [00:57<00:00, 14.35s/it]
[INFO 11-23 18:27:12] ax.service.ax_client: Completed trial 77 with data: {'mse': (30.854595, 0.0), 'compute_cost': (259.005521, 0.0)}.
[INFO 11-23 18:27:12] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4617140656419, 'mse': 0.03633705626188011}, {'compute_cost': {'compute_cost': 0.04072997863172513, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00026928068791182277}})
[INFO 11-23 18:29:09] ax.service.ax_client: Generated new trial 78 with parameters {'dt': 0.246962, 'sensor_std': 1.68175, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.32s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:35<00:36, 18.25s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:52<00:17, 17.44s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:10<00:00, 17.86s/it]100%|██████████| 4/4 [01:10<00:00, 17.65s/it]
[INFO 11-23 18:30:20] ax.service.ax_client: Completed trial 78 with data: {'mse': (10.100842, 0.0), 'compute_cost': (161.42328, 0.0)}.
[INFO 11-23 18:30:20] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4621711642326, 'mse': 0.036337086498978266}, {'compute_cost': {'compute_cost': 0.04059252181096888, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002658952450752994}})
[INFO 11-23 18:34:17] ax.service.ax_client: Generated new trial 79 with parameters {'dt': 0.217762, 'sensor_std': 0.982704, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:10<00:32, 10.87s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:24, 12.15s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:35<00:11, 11.73s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:48<00:00, 12.42s/it]100%|██████████| 4/4 [00:48<00:00, 12.15s/it]
[INFO 11-23 18:35:06] ax.service.ax_client: Completed trial 79 with data: {'mse': (4.84036, 0.0), 'compute_cost': (231.628926, 0.0)}.
[INFO 11-23 18:35:06] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4622465395137, 'mse': 0.03633723607045347}, {'compute_cost': {'compute_cost': 0.040105402512503587, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00026323821449819867}})
[INFO 11-23 18:36:48] ax.service.ax_client: Generated new trial 80 with parameters {'dt': 0.251097, 'sensor_std': 1.808294, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:36, 12.12s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:33, 16.68s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:16, 16.48s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:06<00:00, 17.22s/it]100%|██████████| 4/4 [01:06<00:00, 16.64s/it]
[INFO 11-23 18:37:55] ax.service.ax_client: Completed trial 80 with data: {'mse': (5.563016, 0.0), 'compute_cost': (154.622308, 0.0)}.
[INFO 11-23 18:37:55] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4629801651049, 'mse': 0.036336282080760895}, {'compute_cost': {'compute_cost': 0.03980811257393391, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002061210119032949}})
[INFO 11-23 18:41:37] ax.service.ax_client: Generated new trial 81 with parameters {'dt': 0.1, 'sensor_std': 1.992477, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.86s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:46<00:47, 23.57s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:08<00:23, 23.03s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:34<00:00, 24.27s/it]100%|██████████| 4/4 [01:34<00:00, 23.65s/it]
[INFO 11-23 18:43:12] ax.service.ax_client: Completed trial 81 with data: {'mse': (0.673911, 0.0), 'compute_cost': (375.471965, 0.0)}.
[INFO 11-23 18:43:12] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4630075836294, 'mse': 0.03633632086317107}, {'compute_cost': {'compute_cost': 0.03938258861663988, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002074058452694348}})
[INFO 11-23 18:44:51] ax.service.ax_client: Generated new trial 82 with parameters {'dt': 0.198347, 'sensor_std': 3.0458, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:10<00:30, 10.27s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:23, 11.84s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:13, 13.73s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:58<00:00, 16.02s/it]100%|██████████| 4/4 [00:58<00:00, 14.68s/it]
[INFO 11-23 18:45:50] ax.service.ax_client: Completed trial 82 with data: {'mse': (7.855988, 0.0), 'compute_cost': (167.423792, 0.0)}.
[INFO 11-23 18:45:50] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4632005922196, 'mse': 0.03633631284167116}, {'compute_cost': {'compute_cost': 0.039079717999919626, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020501401837582297}})
[INFO 11-23 18:49:05] ax.service.ax_client: Generated new trial 83 with parameters {'dt': 0.195972, 'sensor_std': 0.492878, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.51s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:37<00:38, 19.40s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:55<00:18, 18.71s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:15<00:00, 19.12s/it]100%|██████████| 4/4 [01:15<00:00, 18.90s/it]
[INFO 11-23 18:50:21] ax.service.ax_client: Completed trial 83 with data: {'mse': (2.342497, 0.0), 'compute_cost': (386.393569, 0.0)}.
[INFO 11-23 18:50:21] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4762129628891, 'mse': 0.036336374026458174}, {'compute_cost': {'compute_cost': 0.038768129814430966, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020347662760811914}})
[INFO 11-23 18:51:24] ax.service.ax_client: Generated new trial 84 with parameters {'dt': 0.1, 'sensor_std': 1.711035, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:21<01:03, 21.33s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.23s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:09<00:23, 23.27s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:34<00:00, 23.70s/it]100%|██████████| 4/4 [01:34<00:00, 23.52s/it]
[INFO 11-23 18:52:59] ax.service.ax_client: Completed trial 84 with data: {'mse': (3.832095, 0.0), 'compute_cost': (396.11041, 0.0)}.
[INFO 11-23 18:52:59] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4768731897357, 'mse': 0.036335886744526036}, {'compute_cost': {'compute_cost': 0.03820112585262961, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018661084646968629}})
[INFO 11-23 18:54:31] ax.service.ax_client: Generated new trial 85 with parameters {'dt': 0.1, 'sensor_std': 2.021256, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.50s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:36<00:35, 17.97s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:50<00:16, 16.27s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:12<00:00, 18.23s/it]100%|██████████| 4/4 [01:12<00:00, 18.05s/it]
[INFO 11-23 18:55:44] ax.service.ax_client: Completed trial 85 with data: {'mse': (2.289623, 0.0), 'compute_cost': (373.685479, 0.0)}.
[INFO 11-23 18:55:44] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4768814824423, 'mse': 0.03633577934368937}, {'compute_cost': {'compute_cost': 0.03780693521352369, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018524541991882848}})
[INFO 11-23 18:59:04] ax.service.ax_client: Generated new trial 86 with parameters {'dt': 0.1, 'sensor_std': 1.6816, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:47, 15.97s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:39, 19.99s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:20, 20.94s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:25<00:00, 22.46s/it]100%|██████████| 4/4 [01:25<00:00, 21.41s/it]
[INFO 11-23 19:00:30] ax.service.ax_client: Completed trial 86 with data: {'mse': (1.311371, 0.0), 'compute_cost': (398.667913, 0.0)}.
[INFO 11-23 19:00:30] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4770084687217, 'mse': 0.036335766406610404}, {'compute_cost': {'compute_cost': 0.03744923404092412, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001840916766587942}})
[INFO 11-23 19:02:20] ax.service.ax_client: Generated new trial 87 with parameters {'dt': 0.1, 'sensor_std': 2.067367, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:57, 19.06s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.29s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:09<00:23, 23.42s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:34<00:00, 23.90s/it]100%|██████████| 4/4 [01:34<00:00, 23.51s/it]
[INFO 11-23 19:03:54] ax.service.ax_client: Completed trial 87 with data: {'mse': (0.539127, 0.0), 'compute_cost': (370.926788, 0.0)}.
[INFO 11-23 19:03:54] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4769722979919, 'mse': 0.03633584966804193}, {'compute_cost': {'compute_cost': 0.03707037510748868, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018544113184640183}})
[INFO 11-23 19:07:10] ax.service.ax_client: Generated new trial 88 with parameters {'dt': 0.132128, 'sensor_std': 1.799148, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:35, 11.99s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:32, 16.17s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:16, 16.71s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:11<00:00, 19.19s/it]100%|██████████| 4/4 [01:11<00:00, 17.86s/it]
[INFO 11-23 19:08:21] ax.service.ax_client: Completed trial 88 with data: {'mse': (37.153683, 0.0), 'compute_cost': (294.37819, 0.0)}.
[INFO 11-23 19:08:21] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4772066149094, 'mse': 0.036333453786317804}, {'compute_cost': {'compute_cost': 0.03662646718789988, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018906049153575503}})
[INFO 11-23 19:09:54] ax.service.ax_client: Generated new trial 89 with parameters {'dt': 0.21384, 'sensor_std': 1.62996, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:47, 15.98s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:37<00:38, 19.30s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:18, 18.13s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:10<00:00, 17.46s/it]100%|██████████| 4/4 [01:10<00:00, 17.69s/it]
[INFO 11-23 19:11:05] ax.service.ax_client: Completed trial 89 with data: {'mse': (6.088986, 0.0), 'compute_cost': (188.635056, 0.0)}.
[INFO 11-23 19:11:05] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4769416005549, 'mse': 0.03633337104398571}, {'compute_cost': {'compute_cost': 0.03633265780599262, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018717447233508797}})
[INFO 11-23 19:11:37] ax.service.ax_client: Generated new trial 90 with parameters {'dt': 0.114522, 'sensor_std': 3.095497, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:57, 19.14s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:45<00:47, 23.62s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:07<00:22, 22.59s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:30<00:00, 22.89s/it]100%|██████████| 4/4 [01:30<00:00, 22.65s/it]
[INFO 11-23 19:13:08] ax.service.ax_client: Completed trial 90 with data: {'mse': (4.014896, 0.0), 'compute_cost': (288.819852, 0.0)}.
[INFO 11-23 19:13:08] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4776856087806, 'mse': 0.0363333150249634}, {'compute_cost': {'compute_cost': 0.03590742295934655, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018558119820320443}})
[INFO 11-23 19:13:31] ax.service.ax_client: Generated new trial 91 with parameters {'dt': 0.516956, 'sensor_std': 2.005505, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:13<00:40, 13.57s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:32, 16.04s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:42<00:13, 13.85s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 12.57s/it]100%|██████████| 4/4 [00:53<00:00, 13.30s/it]
[INFO 11-23 19:14:24] ax.service.ax_client: Completed trial 91 with data: {'mse': (28.096994, 0.0), 'compute_cost': (120.833557, 0.0)}.
[INFO 11-23 19:14:24] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4772341338507, 'mse': 0.036333629638203746}, {'compute_cost': {'compute_cost': 0.0358943993834008, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019856391965647873}})
[INFO 11-23 19:14:33] ax.service.ax_client: Generated new trial 92 with parameters {'dt': 0.449766, 'sensor_std': 1.801729, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.17s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:22<00:23, 11.62s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:37<00:13, 13.06s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 14.45s/it]100%|██████████| 4/4 [00:53<00:00, 13.47s/it]
[INFO 11-23 19:15:27] ax.service.ax_client: Completed trial 92 with data: {'mse': (7.628324, 0.0), 'compute_cost': (86.435052, 0.0)}.
[INFO 11-23 19:15:27] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4772424957574, 'mse': 0.03633345475098615}, {'compute_cost': {'compute_cost': 0.03595359887921821, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018453894426602628}})
[INFO 11-23 19:15:57] ax.service.ax_client: Generated new trial 93 with parameters {'dt': 0.11714, 'sensor_std': 1.998931, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.86s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:43<00:44, 22.10s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:21, 21.47s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:28<00:00, 22.68s/it]100%|██████████| 4/4 [01:28<00:00, 22.20s/it]
[INFO 11-23 19:17:26] ax.service.ax_client: Completed trial 93 with data: {'mse': (0.638589, 0.0), 'compute_cost': (320.187526, 0.0)}.
[INFO 11-23 19:17:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4778929907969, 'mse': 0.036333364782427324}, {'compute_cost': {'compute_cost': 0.03552866714093969, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018404661066243814}})
[INFO 11-23 19:18:16] ax.service.ax_client: Generated new trial 94 with parameters {'dt': 0.595977, 'sensor_std': 4.248336, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:41, 13.72s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:33, 16.81s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.65s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:00<00:00, 14.75s/it]100%|██████████| 4/4 [01:00<00:00, 15.08s/it]
[INFO 11-23 19:19:16] ax.service.ax_client: Completed trial 94 with data: {'mse': (67.080147, 0.0), 'compute_cost': (51.821878, 0.0)}.
[INFO 11-23 19:19:16] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4772889728027, 'mse': 0.036333738821204165}, {'compute_cost': {'compute_cost': 0.035909400263422195, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020219380783057306}})
[INFO 11-23 19:19:31] ax.service.ax_client: Generated new trial 95 with parameters {'dt': 0.413936, 'sensor_std': 1.801011, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.29s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:21<00:22, 11.08s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:34<00:11, 11.69s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:50<00:00, 13.63s/it]100%|██████████| 4/4 [00:50<00:00, 12.66s/it]
[INFO 11-23 19:20:22] ax.service.ax_client: Completed trial 95 with data: {'mse': (43.848591, 0.0), 'compute_cost': (93.930263, 0.0)}.
[INFO 11-23 19:20:22] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4768859157352, 'mse': 0.03633454639136957}, {'compute_cost': {'compute_cost': 0.03598966363931337, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002579867965205723}})
[INFO 11-23 19:23:14] ax.service.ax_client: Generated new trial 96 with parameters {'dt': 0.130603, 'sensor_std': 0.786255, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:55, 18.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:43<00:45, 22.52s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:03<00:21, 21.37s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:26<00:00, 21.73s/it]100%|██████████| 4/4 [01:26<00:00, 21.52s/it]
[INFO 11-23 19:24:41] ax.service.ax_client: Completed trial 96 with data: {'mse': (0.481055, 0.0), 'compute_cost': (434.877362, 0.0)}.
[INFO 11-23 19:24:41] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4701644157998, 'mse': 0.03633399618256128}, {'compute_cost': {'compute_cost': 0.035461625499615027, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020758865027768677}})
[INFO 11-23 19:25:27] ax.service.ax_client: Generated new trial 97 with parameters {'dt': 0.124736, 'sensor_std': 3.188288, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.13s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:42, 21.33s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:02<00:20, 20.63s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:24<00:00, 21.44s/it]100%|██████████| 4/4 [01:24<00:00, 21.20s/it]
[INFO 11-23 19:26:52] ax.service.ax_client: Completed trial 97 with data: {'mse': (6.672832, 0.0), 'compute_cost': (263.286526, 0.0)}.
[INFO 11-23 19:26:52] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.47063825826, 'mse': 0.03633396072853401}, {'compute_cost': {'compute_cost': 0.03507175086325967, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020567017012218335}})
[INFO 11-23 19:27:53] ax.service.ax_client: Generated new trial 98 with parameters {'dt': 0.116423, 'sensor_std': 2.12127, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.49s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:32, 16.34s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:15, 15.87s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:08<00:00, 17.63s/it]100%|██████████| 4/4 [01:08<00:00, 17.09s/it]
[INFO 11-23 19:29:01] ax.service.ax_client: Completed trial 98 with data: {'mse': (0.853017, 0.0), 'compute_cost': (315.963639, 0.0)}.
[INFO 11-23 19:29:01] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4712629309149, 'mse': 0.03633388308278285}, {'compute_cost': {'compute_cost': 0.03467696774782373, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020534424263452035}})
[INFO 11-23 19:30:02] ax.service.ax_client: Generated new trial 99 with parameters {'dt': 0.204995, 'sensor_std': 0.952888, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.11s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:40, 20.02s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:55<00:18, 18.70s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:16<00:00, 19.59s/it]100%|██████████| 4/4 [01:16<00:00, 19.24s/it]
[INFO 11-23 19:31:19] ax.service.ax_client: Completed trial 99 with data: {'mse': (3.062916, 0.0), 'compute_cost': (249.938373, 0.0)}.
[INFO 11-23 19:31:19] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4714608053041, 'mse': 0.036333860213419555}, {'compute_cost': {'compute_cost': 0.034322134409368994, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002039308456244963}})
[INFO 11-23 19:31:38] ax.service.ax_client: Generated new trial 100 with parameters {'dt': 0.105937, 'sensor_std': 0.959895, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.03s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:46<00:48, 24.11s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:08<00:22, 22.80s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:32<00:00, 23.53s/it]100%|██████████| 4/4 [01:32<00:00, 23.22s/it]
[INFO 11-23 19:33:11] ax.service.ax_client: Completed trial 100 with data: {'mse': (0.469575, 0.0), 'compute_cost': (481.837334, 0.0)}.
[INFO 11-23 19:33:11] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4770916787588, 'mse': 0.03633370161482574}, {'compute_cost': {'compute_cost': 0.034066680589661155, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001906273828364854}})
[INFO 11-23 19:33:45] ax.service.ax_client: Generated new trial 101 with parameters {'dt': 0.163395, 'sensor_std': 1.77508, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:51, 17.19s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:40, 20.37s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:58<00:19, 19.49s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:17<00:00, 19.54s/it]100%|██████████| 4/4 [01:17<00:00, 19.46s/it]
[INFO 11-23 19:35:03] ax.service.ax_client: Completed trial 101 with data: {'mse': (5.86073, 0.0), 'compute_cost': (239.198072, 0.0)}.
[INFO 11-23 19:35:03] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4770222266162, 'mse': 0.036333967029586134}, {'compute_cost': {'compute_cost': 0.03374126294912155, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001889778535097637}})
[INFO 11-23 19:35:18] ax.service.ax_client: Generated new trial 102 with parameters {'dt': 0.115072, 'sensor_std': 0.772109, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:37, 12.36s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:27<00:28, 14.16s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:16, 16.15s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 18.97s/it]100%|██████████| 4/4 [01:09<00:00, 17.40s/it]
[INFO 11-23 19:36:27] ax.service.ax_client: Completed trial 102 with data: {'mse': (0.424606, 0.0), 'compute_cost': (498.634206, 0.0)}.
[INFO 11-23 19:36:27] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4870933932339, 'mse': 0.0363339919002339}, {'compute_cost': {'compute_cost': 0.033561455052499876, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018977486644747654}})
[INFO 11-23 19:38:37] ax.service.ax_client: Generated new trial 103 with parameters {'dt': 0.181177, 'sensor_std': 2.003527, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:51, 17.27s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:39, 19.69s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:17, 17.88s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:12<00:00, 17.84s/it]100%|██████████| 4/4 [01:12<00:00, 18.04s/it]
[INFO 11-23 19:39:49] ax.service.ax_client: Completed trial 103 with data: {'mse': (5.399949, 0.0), 'compute_cost': (206.85797, 0.0)}.
[INFO 11-23 19:39:49] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4876341636508, 'mse': 0.03633396460548077}, {'compute_cost': {'compute_cost': 0.03327960684136763, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018819914853508953}})
[INFO 11-23 19:40:15] ax.service.ax_client: Generated new trial 104 with parameters {'dt': 0.476376, 'sensor_std': 1.802262, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:42, 14.08s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:32, 16.33s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.56s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:02<00:00, 15.85s/it]100%|██████████| 4/4 [01:02<00:00, 15.73s/it]
[INFO 11-23 19:41:18] ax.service.ax_client: Completed trial 104 with data: {'mse': (25.638891, 0.0), 'compute_cost': (81.598275, 0.0)}.
[INFO 11-23 19:41:18] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4878029800967, 'mse': 0.03633413628375415}, {'compute_cost': {'compute_cost': 0.033340160152022784, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018695821929088347}})
[INFO 11-23 19:42:37] ax.service.ax_client: Generated new trial 105 with parameters {'dt': 1.476915, 'sensor_std': 3.204857, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:12<00:38, 12.92s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:28, 14.34s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:40<00:13, 13.52s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 13.32s/it]100%|██████████| 4/4 [00:53<00:00, 13.45s/it]
[INFO 11-23 19:43:31] ax.service.ax_client: Completed trial 105 with data: {'mse': (100.261093, 0.0), 'compute_cost': (72.990444, 0.0)}.
[INFO 11-23 19:43:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4869773108086, 'mse': 0.03633459043827081}, {'compute_cost': {'compute_cost': 0.03362373841816614, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020481330927325065}})
[INFO 11-23 19:43:55] ax.service.ax_client: Generated new trial 106 with parameters {'dt': 0.120172, 'sensor_std': 3.130088, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:54, 18.27s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:43, 21.59s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:56<00:18, 18.48s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:11<00:00, 16.73s/it]100%|██████████| 4/4 [01:11<00:00, 17.75s/it]
[INFO 11-23 19:45:06] ax.service.ax_client: Completed trial 106 with data: {'mse': (7.445136, 0.0), 'compute_cost': (274.499019, 0.0)}.
[INFO 11-23 19:45:06] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4873533365658, 'mse': 0.03633458361850472}, {'compute_cost': {'compute_cost': 0.033293614579137, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002030137828143296}})
[INFO 11-23 19:45:17] ax.service.ax_client: Generated new trial 107 with parameters {'dt': 1.493765, 'sensor_std': 3.455073, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:10<00:31, 10.43s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:27, 13.80s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:40<00:13, 13.64s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:54<00:00, 14.15s/it]100%|██████████| 4/4 [00:54<00:00, 13.74s/it]
[INFO 11-23 19:46:12] ax.service.ax_client: Completed trial 107 with data: {'mse': (209.563812, 0.0), 'compute_cost': (71.7889, 0.0)}.
[INFO 11-23 19:46:12] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4873005944667, 'mse': 0.03633549697600813}, {'compute_cost': {'compute_cost': 0.0334671047724864, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002590562529063562}})
[INFO 11-23 19:47:01] ax.service.ax_client: Generated new trial 108 with parameters {'dt': 0.139166, 'sensor_std': 0.484661, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:39, 13.22s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:34<00:36, 18.23s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:18, 18.92s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:15<00:00, 19.81s/it]100%|██████████| 4/4 [01:15<00:00, 18.97s/it]
[INFO 11-23 19:48:17] ax.service.ax_client: Completed trial 108 with data: {'mse': (1.053681, 0.0), 'compute_cost': (550.296246, 0.0)}.
[INFO 11-23 19:48:17] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4940158931424, 'mse': 0.03633486689571974}, {'compute_cost': {'compute_cost': 0.03361353750662951, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020702487610254196}})
[INFO 11-23 19:48:53] ax.service.ax_client: Generated new trial 109 with parameters {'dt': 0.12138, 'sensor_std': 2.048095, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:51, 17.07s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:35<00:35, 17.86s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:52<00:17, 17.56s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:08<00:00, 16.81s/it]100%|██████████| 4/4 [01:08<00:00, 17.09s/it]
[INFO 11-23 19:50:01] ax.service.ax_client: Completed trial 109 with data: {'mse': (0.82197, 0.0), 'compute_cost': (306.528623, 0.0)}.
[INFO 11-23 19:50:01] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.494270574736, 'mse': 0.03633484825209976}, {'compute_cost': {'compute_cost': 0.03328299342307339, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020682073190657634}})
[INFO 11-23 19:50:42] ax.service.ax_client: Generated new trial 110 with parameters {'dt': 0.153869, 'sensor_std': 3.156432, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.40s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:41<00:42, 21.26s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:20, 20.25s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:13<00:00, 17.65s/it]100%|██████████| 4/4 [01:13<00:00, 18.44s/it]
[INFO 11-23 19:51:56] ax.service.ax_client: Completed trial 110 with data: {'mse': (27.335556, 0.0), 'compute_cost': (213.951071, 0.0)}.
[INFO 11-23 19:51:56] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4944093127789, 'mse': 0.036335524406846176}, {'compute_cost': {'compute_cost': 0.03302992238129883, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002563830826253377}})
[INFO 11-23 19:52:24] ax.service.ax_client: Generated new trial 111 with parameters {'dt': 0.117018, 'sensor_std': 0.889895, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.63s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:43<00:45, 22.74s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:19, 19.91s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:15<00:00, 18.06s/it]100%|██████████| 4/4 [01:15<00:00, 18.86s/it]
[INFO 11-23 19:53:40] ax.service.ax_client: Completed trial 111 with data: {'mse': (1.183405, 0.0), 'compute_cost': (453.717297, 0.0)}.
[INFO 11-23 19:53:40] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4940051058618, 'mse': 0.036335524879957504}, {'compute_cost': {'compute_cost': 0.03288287937390043, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00025515473778509544}})
[INFO 11-23 19:53:56] ax.service.ax_client: Generated new trial 112 with parameters {'dt': 0.128432, 'sensor_std': 0.853486, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:37, 12.58s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:34<00:35, 17.81s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:19, 19.12s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:17<00:00, 20.52s/it]100%|██████████| 4/4 [01:17<00:00, 19.35s/it]
[INFO 11-23 19:55:13] ax.service.ax_client: Completed trial 112 with data: {'mse': (1.345448, 0.0), 'compute_cost': (422.727327, 0.0)}.
[INFO 11-23 19:55:13] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4946370004343, 'mse': 0.03633487908604671}, {'compute_cost': {'compute_cost': 0.032528557329905256, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020469786725134696}})
[INFO 11-23 19:56:22] ax.service.ax_client: Generated new trial 113 with parameters {'dt': 0.191225, 'sensor_std': 3.128367, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.70s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:26, 13.33s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:13, 13.31s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:55<00:00, 14.29s/it]100%|██████████| 4/4 [00:55<00:00, 13.89s/it]
[INFO 11-23 19:57:17] ax.service.ax_client: Completed trial 113 with data: {'mse': (11.544059, 0.0), 'compute_cost': (172.526213, 0.0)}.
[INFO 11-23 19:57:17] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4947001407943, 'mse': 0.03633494918393687}, {'compute_cost': {'compute_cost': 0.03234407667065641, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0002028873909979419}})
[INFO 11-23 19:58:48] ax.service.ax_client: Generated new trial 114 with parameters {'dt': 0.214449, 'sensor_std': 0.930604, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:46, 15.57s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:28, 14.24s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:40<00:12, 12.93s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 12.98s/it]100%|██████████| 4/4 [00:53<00:00, 13.32s/it]
[INFO 11-23 19:59:41] ax.service.ax_client: Completed trial 114 with data: {'mse': (2.811727, 0.0), 'compute_cost': (241.848951, 0.0)}.
[INFO 11-23 19:59:41] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4948867429598, 'mse': 0.0363349075256334}, {'compute_cost': {'compute_cost': 0.032064355905668515, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020172068074638517}})
[INFO 11-23 20:00:17] ax.service.ax_client: Generated new trial 115 with parameters {'dt': 0.261342, 'sensor_std': 5.228972, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.12s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:32, 16.22s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:44<00:14, 14.20s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:58<00:00, 14.34s/it]100%|██████████| 4/4 [00:58<00:00, 14.69s/it]
[INFO 11-23 20:01:16] ax.service.ax_client: Completed trial 115 with data: {'mse': (11.198515, 0.0), 'compute_cost': (209.614641, 0.0)}.
[INFO 11-23 20:01:16] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4945861651238, 'mse': 0.036334883553758246}, {'compute_cost': {'compute_cost': 0.03187711947820714, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019996662301004746}})
[INFO 11-23 20:03:12] ax.service.ax_client: Generated new trial 116 with parameters {'dt': 0.101683, 'sensor_std': 0.931367, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:21<01:03, 21.24s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:45<00:45, 22.72s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:19, 19.25s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:16<00:00, 18.27s/it]100%|██████████| 4/4 [01:16<00:00, 19.22s/it]
[INFO 11-23 20:04:28] ax.service.ax_client: Completed trial 116 with data: {'mse': (0.419549, 0.0), 'compute_cost': (509.842505, 0.0)}.
[INFO 11-23 20:04:28] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.494783874211, 'mse': 0.036334688089684875}, {'compute_cost': {'compute_cost': 0.03190212014220603, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018704310353967045}})
[INFO 11-23 20:04:46] ax.service.ax_client: Generated new trial 117 with parameters {'dt': 0.116777, 'sensor_std': 3.045328, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:49, 16.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:34<00:34, 17.36s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:16, 16.06s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:04<00:00, 15.75s/it]100%|██████████| 4/4 [01:04<00:00, 16.06s/it]
[INFO 11-23 20:05:51] ax.service.ax_client: Completed trial 117 with data: {'mse': (2.764728, 0.0), 'compute_cost': (284.381578, 0.0)}.
[INFO 11-23 20:05:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.494902456378, 'mse': 0.03633466921957407}, {'compute_cost': {'compute_cost': 0.03161901821652028, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018599536378855047}})
[INFO 11-23 20:06:14] ax.service.ax_client: Generated new trial 118 with parameters {'dt': 0.387839, 'sensor_std': 9.043885, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:14<00:43, 14.38s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:28, 14.32s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:41<00:13, 13.72s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:56<00:00, 14.08s/it]100%|██████████| 4/4 [00:56<00:00, 14.08s/it]
[INFO 11-23 20:07:11] ax.service.ax_client: Completed trial 118 with data: {'mse': (67.882309, 0.0), 'compute_cost': (136.046907, 0.0)}.
[INFO 11-23 20:07:11] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4946709692372, 'mse': 0.03633511912042131}, {'compute_cost': {'compute_cost': 0.03157771356979379, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020332933454813234}})
[INFO 11-23 20:07:45] ax.service.ax_client: Generated new trial 119 with parameters {'dt': 0.118637, 'sensor_std': 0.569942, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:50, 16.82s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:33, 16.52s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:15, 15.59s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:07<00:00, 17.44s/it]100%|██████████| 4/4 [01:07<00:00, 16.97s/it]
[INFO 11-23 20:08:53] ax.service.ax_client: Completed trial 119 with data: {'mse': (0.736989, 0.0), 'compute_cost': (580.462586, 0.0)}.
[INFO 11-23 20:08:53] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5150119308148, 'mse': 0.036334987227457205}, {'compute_cost': {'compute_cost': 0.03168667177520234, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00020321014990596012}})
[INFO 11-23 20:09:46] ax.service.ax_client: Generated new trial 120 with parameters {'dt': 0.117777, 'sensor_std': 2.149296, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.84s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:31, 15.62s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:16, 16.21s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:11<00:00, 19.24s/it]100%|██████████| 4/4 [01:11<00:00, 17.80s/it]
[INFO 11-23 20:10:57] ax.service.ax_client: Completed trial 120 with data: {'mse': (4.124877, 0.0), 'compute_cost': (311.02516, 0.0)}.
[INFO 11-23 20:10:57] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5151992855185, 'mse': 0.03633479303497822}, {'compute_cost': {'compute_cost': 0.03140029102706033, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001887572303153431}})
[INFO 11-23 20:11:44] ax.service.ax_client: Generated new trial 121 with parameters {'dt': 0.121365, 'sensor_std': 1.697679, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:50, 16.86s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:32, 16.45s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:15, 15.47s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:06<00:00, 17.09s/it]100%|██████████| 4/4 [01:06<00:00, 16.73s/it]
[INFO 11-23 20:12:51] ax.service.ax_client: Completed trial 121 with data: {'mse': (1.029009, 0.0), 'compute_cost': (327.327373, 0.0)}.
[INFO 11-23 20:12:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5154407636524, 'mse': 0.036334777252202244}, {'compute_cost': {'compute_cost': 0.03112208669989289, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018798739679805757}})
[INFO 11-23 20:14:00] ax.service.ax_client: Generated new trial 122 with parameters {'dt': 0.115705, 'sensor_std': 1.980063, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.79s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:43, 21.72s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:21, 21.53s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:23<00:00, 20.62s/it]100%|██████████| 4/4 [01:23<00:00, 20.85s/it]
[INFO 11-23 20:15:24] ax.service.ax_client: Completed trial 122 with data: {'mse': (0.996626, 0.0), 'compute_cost': (325.18766, 0.0)}.
[INFO 11-23 20:15:24] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5154558885995, 'mse': 0.03633473859681047}, {'compute_cost': {'compute_cost': 0.03086879323244752, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018722257688498462}})
[INFO 11-23 20:16:28] ax.service.ax_client: Generated new trial 123 with parameters {'dt': 0.117841, 'sensor_std': 1.752124, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:00, 20.01s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:44<00:45, 22.88s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:58<00:18, 18.75s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:13<00:00, 17.25s/it]100%|██████████| 4/4 [01:13<00:00, 18.42s/it]
[INFO 11-23 20:17:41] ax.service.ax_client: Completed trial 123 with data: {'mse': (3.661812, 0.0), 'compute_cost': (333.231684, 0.0)}.
[INFO 11-23 20:17:41] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5156111462022, 'mse': 0.0363347196909487}, {'compute_cost': {'compute_cost': 0.030609213491728054, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018609848818299324}})
[INFO 11-23 20:19:25] ax.service.ax_client: Generated new trial 124 with parameters {'dt': 0.17043, 'sensor_std': 1.793748, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:51, 17.16s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:40<00:41, 20.79s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:17, 17.51s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:07<00:00, 15.87s/it]100%|██████████| 4/4 [01:07<00:00, 16.86s/it]
[INFO 11-23 20:20:32] ax.service.ax_client: Completed trial 124 with data: {'mse': (1.661341, 0.0), 'compute_cost': (228.465371, 0.0)}.
[INFO 11-23 20:20:32] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5159047204354, 'mse': 0.0363337215691697}, {'compute_cost': {'compute_cost': 0.03034599791363009, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013044529746711236}})
[INFO 11-23 20:21:00] ax.service.ax_client: Generated new trial 125 with parameters {'dt': 1.469706, 'sensor_std': 4.135274, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:10<00:30, 10.12s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:24<00:25, 12.60s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:38<00:13, 13.34s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 14.07s/it]100%|██████████| 4/4 [00:53<00:00, 13.47s/it]
[INFO 11-23 20:21:54] ax.service.ax_client: Completed trial 125 with data: {'mse': (227.988617, 0.0), 'compute_cost': (72.15424, 0.0)}.
[INFO 11-23 20:21:54] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5160780202691, 'mse': 0.03633491816858481}, {'compute_cost': {'compute_cost': 0.030485407840524857, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.000189327365875539}})
[INFO 11-23 20:23:26] ax.service.ax_client: Generated new trial 126 with parameters {'dt': 0.106592, 'sensor_std': 3.209684, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:01, 20.44s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:47<00:48, 24.07s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:01<00:19, 19.63s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:16<00:00, 17.82s/it]100%|██████████| 4/4 [01:16<00:00, 19.11s/it]
[INFO 11-23 20:24:42] ax.service.ax_client: Completed trial 126 with data: {'mse': (1.840571, 0.0), 'compute_cost': (307.612568, 0.0)}.
[INFO 11-23 20:24:42] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5160188560587, 'mse': 0.03633488586887701}, {'compute_cost': {'compute_cost': 0.030248777704784936, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018845249660209837}})
[INFO 11-23 20:24:57] ax.service.ax_client: Generated new trial 127 with parameters {'dt': 0.105532, 'sensor_std': 1.956149, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.22s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:44, 22.04s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:22, 22.02s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:21<00:00, 20.22s/it]100%|██████████| 4/4 [01:21<00:00, 20.45s/it]
[INFO 11-23 20:26:19] ax.service.ax_client: Completed trial 127 with data: {'mse': (0.908311, 0.0), 'compute_cost': (357.996184, 0.0)}.
[INFO 11-23 20:26:19] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5160517236088, 'mse': 0.0363348322941075}, {'compute_cost': {'compute_cost': 0.03002865264108139, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001881498854387089}})
[INFO 11-23 20:27:04] ax.service.ax_client: Generated new trial 128 with parameters {'dt': 0.113198, 'sensor_std': 2.063285, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:50, 16.98s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:40, 20.48s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:18, 18.01s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 16.62s/it]100%|██████████| 4/4 [01:09<00:00, 17.37s/it]
[INFO 11-23 20:28:14] ax.service.ax_client: Completed trial 128 with data: {'mse': (3.121338, 0.0), 'compute_cost': (327.890109, 0.0)}.
[INFO 11-23 20:28:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.516139323299, 'mse': 0.03633378756273231}, {'compute_cost': {'compute_cost': 0.02976177915442415, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013122787837096652}})
[INFO 11-23 20:28:36] ax.service.ax_client: Generated new trial 129 with parameters {'dt': 0.127914, 'sensor_std': 2.02604, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:42, 14.33s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:40, 20.07s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:57<00:19, 19.78s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:20<00:00, 20.85s/it]100%|██████████| 4/4 [01:20<00:00, 20.09s/it]
[INFO 11-23 20:29:57] ax.service.ax_client: Completed trial 129 with data: {'mse': (11.498877, 0.0), 'compute_cost': (291.910864, 0.0)}.
[INFO 11-23 20:29:57] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5161595436944, 'mse': 0.03633378817879773}, {'compute_cost': {'compute_cost': 0.02952969707182408, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013024342409172985}})
[INFO 11-23 20:31:39] ax.service.ax_client: Generated new trial 130 with parameters {'dt': 0.103684, 'sensor_std': 0.852289, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:47, 15.72s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:40, 20.05s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:56<00:19, 19.03s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:12<00:00, 17.84s/it]100%|██████████| 4/4 [01:12<00:00, 18.16s/it]
[INFO 11-23 20:32:51] ax.service.ax_client: Completed trial 130 with data: {'mse': (1.341983, 0.0), 'compute_cost': (524.025042, 0.0)}.
[INFO 11-23 20:32:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5205067394713, 'mse': 0.03633376249225684}, {'compute_cost': {'compute_cost': 0.02958811327414937, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00012974330255536258}})
[INFO 11-23 20:33:14] ax.service.ax_client: Generated new trial 131 with parameters {'dt': 0.1, 'sensor_std': 3.044253, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:40, 13.42s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:34<00:36, 18.01s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:56<00:19, 19.77s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:22<00:00, 22.16s/it]100%|██████████| 4/4 [01:22<00:00, 20.58s/it]
[INFO 11-23 20:34:36] ax.service.ax_client: Completed trial 131 with data: {'mse': (2.886051, 0.0), 'compute_cost': (332.121942, 0.0)}.
[INFO 11-23 20:34:36] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.520346059624, 'mse': 0.0363337271535773}, {'compute_cost': {'compute_cost': 0.02937942037668056, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00012907311017589074}})
[INFO 11-23 20:35:39] ax.service.ax_client: Generated new trial 132 with parameters {'dt': 0.104185, 'sensor_std': 2.121479, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:42, 14.13s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:34, 17.18s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:55<00:19, 19.32s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:18<00:00, 20.78s/it]100%|██████████| 4/4 [01:18<00:00, 19.58s/it]
[INFO 11-23 20:36:57] ax.service.ax_client: Completed trial 132 with data: {'mse': (1.918815, 0.0), 'compute_cost': (353.065023, 0.0)}.
[INFO 11-23 20:36:57] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5203500450052, 'mse': 0.03633317147945192}, {'compute_cost': {'compute_cost': 0.02915584885597004, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010665763380411468}})
[INFO 11-23 20:37:56] ax.service.ax_client: Generated new trial 133 with parameters {'dt': 0.516144, 'sensor_std': 1.43159, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.09s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:21, 10.58s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:30<00:10, 10.32s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:40<00:00, 10.25s/it]100%|██████████| 4/4 [00:40<00:00, 10.22s/it]
[INFO 11-23 20:38:37] ax.service.ax_client: Completed trial 133 with data: {'mse': (53.033947, 0.0), 'compute_cost': (82.269864, 0.0)}.
[INFO 11-23 20:38:37] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5207006417605, 'mse': 0.03633385731358807}, {'compute_cost': {'compute_cost': 0.029242110895673794, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001307500849936218}})
[INFO 11-23 20:39:18] ax.service.ax_client: Generated new trial 134 with parameters {'dt': 0.692564, 'sensor_std': 7.718324, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:34, 11.56s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:29, 14.59s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:42<00:14, 14.51s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:58<00:00, 15.04s/it]100%|██████████| 4/4 [00:58<00:00, 14.64s/it]
[INFO 11-23 20:40:17] ax.service.ax_client: Completed trial 134 with data: {'mse': (81.574654, 0.0), 'compute_cost': (40.774626, 0.0)}.
[INFO 11-23 20:40:17] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5208242685508, 'mse': 0.03633508594341528}, {'compute_cost': {'compute_cost': 0.029482499345743422, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019090710587635015}})
[INFO 11-23 20:42:50] ax.service.ax_client: Generated new trial 135 with parameters {'dt': 0.123642, 'sensor_std': 3.209627, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.80s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:29<00:30, 15.20s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.76s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:02<00:00, 16.04s/it]100%|██████████| 4/4 [01:02<00:00, 15.64s/it]
[INFO 11-23 20:43:53] ax.service.ax_client: Completed trial 135 with data: {'mse': (2.757241, 0.0), 'compute_cost': (265.19367, 0.0)}.
[INFO 11-23 20:43:53] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5207794900246, 'mse': 0.036335039194145935}, {'compute_cost': {'compute_cost': 0.029275329575692913, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00018996672382516722}})
[INFO 11-23 20:44:38] ax.service.ax_client: Generated new trial 136 with parameters {'dt': 0.124414, 'sensor_std': 2.101428, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:44, 14.85s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:39, 19.78s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:58<00:20, 20.13s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:19<00:00, 20.61s/it]100%|██████████| 4/4 [01:19<00:00, 19.99s/it]
[INFO 11-23 20:45:58] ax.service.ax_client: Completed trial 136 with data: {'mse': (7.588349, 0.0), 'compute_cost': (296.562947, 0.0)}.
[INFO 11-23 20:45:58] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5208748120863, 'mse': 0.03633401055568619}, {'compute_cost': {'compute_cost': 0.029024733434917096, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013116803926346705}})
[INFO 11-23 20:46:43] ax.service.ax_client: Generated new trial 137 with parameters {'dt': 1.233874, 'sensor_std': 2.7889, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:09<00:28,  9.38s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:21, 10.66s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:33<00:11, 11.63s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:47<00:00, 12.61s/it]100%|██████████| 4/4 [00:47<00:00, 11.96s/it]
[INFO 11-23 20:47:30] ax.service.ax_client: Completed trial 137 with data: {'mse': (45.682495, 0.0), 'compute_cost': (88.310564, 0.0)}.
[INFO 11-23 20:47:30] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5209794049763, 'mse': 0.03633526419704758}, {'compute_cost': {'compute_cost': 0.02911505717966674, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001922288432543047}})
[INFO 11-23 20:48:21] ax.service.ax_client: Generated new trial 138 with parameters {'dt': 0.123282, 'sensor_std': 1.646056, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.02s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:39, 19.60s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:00<00:20, 20.80s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:19<00:00, 20.26s/it]100%|██████████| 4/4 [01:19<00:00, 19.94s/it]
[INFO 11-23 20:49:41] ax.service.ax_client: Completed trial 138 with data: {'mse': (0.869419, 0.0), 'compute_cost': (325.982951, 0.0)}.
[INFO 11-23 20:49:41] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5211672128773, 'mse': 0.036335226368606754}, {'compute_cost': {'compute_cost': 0.02889309005375631, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019198717604742538}})
[INFO 11-23 20:51:19] ax.service.ax_client: Generated new trial 139 with parameters {'dt': 0.115493, 'sensor_std': 0.9796, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 20.73s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:45<00:46, 23.04s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:59<00:19, 19.11s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:14<00:00, 17.30s/it]100%|██████████| 4/4 [01:14<00:00, 18.59s/it]
[INFO 11-23 20:52:33] ax.service.ax_client: Completed trial 139 with data: {'mse': (2.867027, 0.0), 'compute_cost': (437.435576, 0.0)}.
[INFO 11-23 20:52:33] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5213082097055, 'mse': 0.03633516451743013}, {'compute_cost': {'compute_cost': 0.028789584681818338, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019105862996814942}})
[INFO 11-23 20:53:37] ax.service.ax_client: Generated new trial 140 with parameters {'dt': 0.1, 'sensor_std': 1.929907, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:56, 18.89s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:44<00:45, 22.64s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:59<00:19, 19.25s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:14<00:00, 17.74s/it]100%|██████████| 4/4 [01:14<00:00, 18.70s/it]
[INFO 11-23 20:54:52] ax.service.ax_client: Completed trial 140 with data: {'mse': (0.541117, 0.0), 'compute_cost': (379.539902, 0.0)}.
[INFO 11-23 20:54:52] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5214954382909, 'mse': 0.03633406336911271}, {'compute_cost': {'compute_cost': 0.02858005957461458, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013238195056752735}})
[INFO 11-23 20:56:09] ax.service.ax_client: Generated new trial 141 with parameters {'dt': 0.113584, 'sensor_std': 0.601873, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.98s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:44<00:45, 22.87s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:01<00:20, 20.06s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:17<00:00, 18.32s/it]100%|██████████| 4/4 [01:17<00:00, 19.31s/it]
[INFO 11-23 20:57:26] ax.service.ax_client: Completed trial 141 with data: {'mse': (4.64901, 0.0), 'compute_cost': (585.795572, 0.0)}.
[INFO 11-23 20:57:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5090762848774, 'mse': 0.03633978386774217}, {'compute_cost': {'compute_cost': 0.028666371720756874, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013160916739794772}})
[INFO 11-23 20:57:54] ax.service.ax_client: Generated new trial 142 with parameters {'dt': 1.423839, 'sensor_std': 2.418639, 'integration_method': 'RK4'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 25%|██▌       | 1/4 [00:13<00:39, 13.33s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:28, 14.27s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:12, 12.82s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:51<00:00, 12.44s/it]100%|██████████| 4/4 [00:51<00:00, 12.80s/it]
[INFO 11-23 20:58:46] ax.service.ax_client: Completed trial 142 with data: {'mse': (123.712204, 0.0), 'compute_cost': (77.492185, 0.0)}.
[INFO 11-23 20:58:46] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5092152174117, 'mse': 0.03634162400547858}, {'compute_cost': {'compute_cost': 0.028765740900863892, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019323337644627954}})
[INFO 11-23 20:59:24] ax.service.ax_client: Generated new trial 143 with parameters {'dt': 0.20035, 'sensor_std': 3.155531, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.83s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:29<00:29, 14.83s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:40<00:13, 13.36s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 13.22s/it]100%|██████████| 4/4 [00:53<00:00, 13.42s/it]
[INFO 11-23 21:00:17] ax.service.ax_client: Completed trial 143 with data: {'mse': (8.16765, 0.0), 'compute_cost': (164.325254, 0.0)}.
[INFO 11-23 21:00:17] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.5093700560957, 'mse': 0.036341651333080094}, {'compute_cost': {'compute_cost': 0.02865510659338319, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00019193193919739653}})
[INFO 11-23 21:01:11] ax.service.ax_client: Generated new trial 144 with parameters {'dt': 0.105024, 'sensor_std': 0.640238, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.99s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:38, 19.19s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:53<00:17, 17.31s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:10<00:00, 17.11s/it]100%|██████████| 4/4 [01:10<00:00, 17.62s/it]
[INFO 11-23 21:02:22] ax.service.ax_client: Completed trial 144 with data: {'mse': (3.935096, 0.0), 'compute_cost': (609.83856, 0.0)}.
[INFO 11-23 21:02:22] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4305098647487, 'mse': 0.036339426374288664}, {'compute_cost': {'compute_cost': 0.022420535942445096, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013183657005994795}})
[INFO 11-23 21:03:16] ax.service.ax_client: Generated new trial 145 with parameters {'dt': 0.1, 'sensor_std': 1.825332, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:20<01:02, 20.96s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:38, 19.11s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:53<00:17, 17.10s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 16.59s/it]100%|██████████| 4/4 [01:09<00:00, 17.32s/it]
[INFO 11-23 21:04:25] ax.service.ax_client: Completed trial 145 with data: {'mse': (0.437731, 0.0), 'compute_cost': (386.961401, 0.0)}.
[INFO 11-23 21:04:25] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4307126380861, 'mse': 0.03633951055627094}, {'compute_cost': {'compute_cost': 0.02230221949555325, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013185864436648505}})
[INFO 11-23 21:07:22] ax.service.ax_client: Generated new trial 146 with parameters {'dt': 0.11705, 'sensor_std': 0.914385, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:19<00:59, 19.78s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:36<00:35, 17.91s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:49<00:15, 15.79s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:04<00:00, 15.39s/it]100%|██████████| 4/4 [01:04<00:00, 16.11s/it]
[INFO 11-23 21:08:26] ax.service.ax_client: Completed trial 146 with data: {'mse': (2.845722, 0.0), 'compute_cost': (447.166061, 0.0)}.
[INFO 11-23 21:08:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4307829653128, 'mse': 0.03633954844784881}, {'compute_cost': {'compute_cost': 0.022242145488447294, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00013125757319298867}})
[INFO 11-23 21:09:51] ax.service.ax_client: Generated new trial 147 with parameters {'dt': 0.1, 'sensor_std': 0.975252, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:22<01:06, 22.18s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:40<00:39, 19.75s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:54<00:17, 17.17s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 16.38s/it]100%|██████████| 4/4 [01:09<00:00, 17.38s/it]
[INFO 11-23 21:11:00] ax.service.ax_client: Completed trial 147 with data: {'mse': (0.092271, 0.0), 'compute_cost': (506.344021, 0.0)}.
[INFO 11-23 21:11:00] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4312313284595, 'mse': 0.03633959837003076}, {'compute_cost': {'compute_cost': 0.02225816607812575, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001311767981355198}})
[INFO 11-23 21:12:09] ax.service.ax_client: Generated new trial 148 with parameters {'dt': 0.1, 'sensor_std': 1.942165, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:21<01:03, 21.31s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:49<00:51, 25.53s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:08<00:22, 22.28s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:24<00:00, 19.89s/it]100%|██████████| 4/4 [01:24<00:00, 21.11s/it]
[INFO 11-23 21:13:34] ax.service.ax_client: Completed trial 148 with data: {'mse': (0.702515, 0.0), 'compute_cost': (378.722339, 0.0)}.
[INFO 11-23 21:13:34] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4314354424703, 'mse': 0.03633875118003793}, {'compute_cost': {'compute_cost': 0.022120230501102803, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010803468824426524}})
[INFO 11-23 21:13:55] ax.service.ax_client: Generated new trial 149 with parameters {'dt': 0.1, 'sensor_std': 3.230663, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:44, 14.68s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:44, 22.12s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:04<00:22, 22.31s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:23<00:00, 21.16s/it]100%|██████████| 4/4 [01:23<00:00, 20.99s/it]
[INFO 11-23 21:15:19] ax.service.ax_client: Completed trial 149 with data: {'mse': (1.400503, 0.0), 'compute_cost': (327.383489, 0.0)}.
[INFO 11-23 21:15:19] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4320876708906, 'mse': 0.036338815501910204}, {'compute_cost': {'compute_cost': 0.02198285771778714, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010767281006382617}})
[INFO 11-23 21:15:43] ax.service.ax_client: Generated new trial 150 with parameters {'dt': 0.10909, 'sensor_std': 1.64506, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.12s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:42<00:44, 22.29s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [01:01<00:20, 20.72s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:25<00:00, 21.96s/it]100%|██████████| 4/4 [01:25<00:00, 21.28s/it]
[INFO 11-23 21:17:08] ax.service.ax_client: Completed trial 150 with data: {'mse': (1.234368, 0.0), 'compute_cost': (368.476433, 0.0)}.
[INFO 11-23 21:17:08] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4328568731106, 'mse': 0.03633898586659967}, {'compute_cost': {'compute_cost': 0.021858431953824715, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010732729324979253}})
[INFO 11-23 21:17:37] ax.service.ax_client: Generated new trial 151 with parameters {'dt': 0.10772, 'sensor_std': 1.693335, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:45, 15.11s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:33, 16.79s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:50<00:17, 17.02s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:12<00:00, 19.12s/it]100%|██████████| 4/4 [01:12<00:00, 18.18s/it]
[INFO 11-23 21:18:49] ax.service.ax_client: Completed trial 151 with data: {'mse': (1.14139, 0.0), 'compute_cost': (369.139745, 0.0)}.
[INFO 11-23 21:18:49] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4330888949258, 'mse': 0.03633911905776621}, {'compute_cost': {'compute_cost': 0.02173671173486933, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010699065609378233}})
[INFO 11-23 21:19:43] ax.service.ax_client: Generated new trial 152 with parameters {'dt': 0.156515, 'sensor_std': 1.632952, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.87s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:26, 13.41s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:38<00:12, 12.65s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:52<00:00, 13.29s/it]100%|██████████| 4/4 [00:52<00:00, 13.17s/it]
[INFO 11-23 21:20:36] ax.service.ax_client: Completed trial 152 with data: {'mse': (1.859625, 0.0), 'compute_cost': (257.544925, 0.0)}.
[INFO 11-23 21:20:36] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4327658389259, 'mse': 0.0363392706804504}, {'compute_cost': {'compute_cost': 0.02156026497266089, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010558667811377522}})
[INFO 11-23 21:21:19] ax.service.ax_client: Generated new trial 153 with parameters {'dt': 0.23679, 'sensor_std': 0.957721, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:50, 16.77s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:35<00:36, 18.01s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:15, 15.18s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:00<00:00, 14.26s/it]100%|██████████| 4/4 [01:00<00:00, 15.08s/it]
[INFO 11-23 21:22:19] ax.service.ax_client: Completed trial 153 with data: {'mse': (10.884182, 0.0), 'compute_cost': (215.818581, 0.0)}.
[INFO 11-23 21:22:19] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4325947650709, 'mse': 0.03633924312067904}, {'compute_cost': {'compute_cost': 0.02143166779869889, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010493157770806096}})
[INFO 11-23 21:23:05] ax.service.ax_client: Generated new trial 154 with parameters {'dt': 0.124049, 'sensor_std': 3.023344, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:47, 15.72s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:30, 15.50s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.57s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:04<00:00, 16.30s/it]100%|██████████| 4/4 [01:04<00:00, 16.03s/it]
[INFO 11-23 21:24:09] ax.service.ax_client: Completed trial 154 with data: {'mse': (3.89443, 0.0), 'compute_cost': (268.192607, 0.0)}.
[INFO 11-23 21:24:09] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4327315589162, 'mse': 0.036339310055124585}, {'compute_cost': {'compute_cost': 0.021295444785027765, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010439168500682657}})
[INFO 11-23 21:24:56] ax.service.ax_client: Generated new trial 155 with parameters {'dt': 0.679919, 'sensor_std': 1.932728, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:41, 13.96s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:25<00:24, 12.25s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:33<00:10, 10.74s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:43<00:00, 10.43s/it]100%|██████████| 4/4 [00:43<00:00, 10.98s/it]
[INFO 11-23 21:25:40] ax.service.ax_client: Completed trial 155 with data: {'mse': (71.124741, 0.0), 'compute_cost': (55.79352, 0.0)}.
[INFO 11-23 21:25:40] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4321802090112, 'mse': 0.03633961421999565}, {'compute_cost': {'compute_cost': 0.021390588578919296, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010677058656008259}})
[INFO 11-23 21:26:12] ax.service.ax_client: Generated new trial 156 with parameters {'dt': 0.127401, 'sensor_std': 1.665988, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:47, 15.75s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:40, 20.12s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:52<00:16, 16.93s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:06<00:00, 15.85s/it]100%|██████████| 4/4 [01:06<00:00, 16.57s/it]
[INFO 11-23 21:27:18] ax.service.ax_client: Completed trial 156 with data: {'mse': (1.610352, 0.0), 'compute_cost': (314.016541, 0.0)}.
[INFO 11-23 21:27:18] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4323317914501, 'mse': 0.03633965246603488}, {'compute_cost': {'compute_cost': 0.02124220055450859, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010525455853127702}})
[INFO 11-23 21:27:44] ax.service.ax_client: Generated new trial 157 with parameters {'dt': 0.148688, 'sensor_std': 1.707377, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:46, 15.35s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:38<00:40, 20.17s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:52<00:16, 17.00s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:05<00:00, 15.61s/it]100%|██████████| 4/4 [01:05<00:00, 16.40s/it]
[INFO 11-23 21:28:49] ax.service.ax_client: Completed trial 157 with data: {'mse': (2.909061, 0.0), 'compute_cost': (266.614242, 0.0)}.
[INFO 11-23 21:28:49] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4323823786665, 'mse': 0.036339766600177015}, {'compute_cost': {'compute_cost': 0.021098165040895723, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010479005765453865}})
[INFO 11-23 21:29:19] ax.service.ax_client: Generated new trial 158 with parameters {'dt': 0.16605, 'sensor_std': 1.614036, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:36, 12.14s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:34, 17.47s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.51s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:59<00:00, 14.61s/it]100%|██████████| 4/4 [00:59<00:00, 14.94s/it]
[INFO 11-23 21:30:19] ax.service.ax_client: Completed trial 158 with data: {'mse': (54.098774, 0.0), 'compute_cost': (243.836318, 0.0)}.
[INFO 11-23 21:30:19] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.432348653914, 'mse': 0.036339043781342895}, {'compute_cost': {'compute_cost': 0.02095784924063555, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010713867832712287}})
[INFO 11-23 21:30:47] ax.service.ax_client: Generated new trial 159 with parameters {'dt': 0.134228, 'sensor_std': 0.829163, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:41, 13.82s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:33<00:34, 17.28s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:15, 15.56s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:00<00:00, 14.73s/it]100%|██████████| 4/4 [01:00<00:00, 15.13s/it]
[INFO 11-23 21:31:48] ax.service.ax_client: Completed trial 159 with data: {'mse': (1.166546, 0.0), 'compute_cost': (410.876194, 0.0)}.
[INFO 11-23 21:31:48] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4326884048558, 'mse': 0.03633906875165316}, {'compute_cost': {'compute_cost': 0.020860124749444816, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010682107520856004}})
[INFO 11-23 21:32:11] ax.service.ax_client: Generated new trial 160 with parameters {'dt': 0.164104, 'sensor_std': 1.645936, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:40, 13.34s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:33, 16.91s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.27s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:58<00:00, 14.31s/it]100%|██████████| 4/4 [00:58<00:00, 14.72s/it]
[INFO 11-23 21:33:10] ax.service.ax_client: Completed trial 160 with data: {'mse': (6.197719, 0.0), 'compute_cost': (244.899692, 0.0)}.
[INFO 11-23 21:33:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4328920610251, 'mse': 0.03633889083700481}, {'compute_cost': {'compute_cost': 0.02061638559292428, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010501918064322198}})
[INFO 11-23 21:33:48] ax.service.ax_client: Generated new trial 161 with parameters {'dt': 0.139065, 'sensor_std': 1.637993, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:55, 18.51s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:39, 19.76s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:51<00:16, 16.39s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:05<00:00, 15.27s/it]100%|██████████| 4/4 [01:05<00:00, 16.27s/it]
[INFO 11-23 21:34:53] ax.service.ax_client: Completed trial 161 with data: {'mse': (0.599191, 0.0), 'compute_cost': (289.524475, 0.0)}.
[INFO 11-23 21:34:53] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4327279526108, 'mse': 0.0363391452455879}, {'compute_cost': {'compute_cost': 0.020480948229609417, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010512436245319836}})
[INFO 11-23 21:35:58] ax.service.ax_client: Generated new trial 162 with parameters {'dt': 0.1, 'sensor_std': 0.889937, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:42, 14.10s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:31, 15.53s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:45<00:15, 15.02s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:03<00:00, 16.52s/it]100%|██████████| 4/4 [01:03<00:00, 15.96s/it]
[INFO 11-23 21:37:02] ax.service.ax_client: Completed trial 162 with data: {'mse': (0.123977, 0.0), 'compute_cost': (530.918902, 0.0)}.
[INFO 11-23 21:37:02] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4327123164778, 'mse': 0.0363392665457809}, {'compute_cost': {'compute_cost': 0.020544062066569734, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010527039087500719}})
[INFO 11-23 21:37:49] ax.service.ax_client: Generated new trial 163 with parameters {'dt': 0.102826, 'sensor_std': 2.049461, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:39, 13.21s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:29<00:30, 15.10s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:43<00:14, 14.75s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:04<00:00, 16.88s/it]100%|██████████| 4/4 [01:04<00:00, 16.03s/it]
[INFO 11-23 21:38:53] ax.service.ax_client: Completed trial 163 with data: {'mse': (1.614686, 0.0), 'compute_cost': (361.75999, 0.0)}.
[INFO 11-23 21:38:53] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4328712499284, 'mse': 0.036339210935359745}, {'compute_cost': {'compute_cost': 0.020446170033815967, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010491699628218056}})
[INFO 11-23 21:39:40] ax.service.ax_client: Generated new trial 164 with parameters {'dt': 0.457469, 'sensor_std': 2.587951, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:08<00:26,  8.92s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.10s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:30<00:10, 10.21s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:45<00:00, 12.15s/it]100%|██████████| 4/4 [00:45<00:00, 11.33s/it]
[INFO 11-23 21:40:25] ax.service.ax_client: Completed trial 164 with data: {'mse': (19.405987, 0.0), 'compute_cost': (75.76511, 0.0)}.
[INFO 11-23 21:40:25] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4328012472649, 'mse': 0.03633929386380963}, {'compute_cost': {'compute_cost': 0.02047966380687062, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010464717682086533}})
[INFO 11-23 21:41:16] ax.service.ax_client: Generated new trial 165 with parameters {'dt': 0.21808, 'sensor_std': 2.009742, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:33, 11.11s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:27<00:28, 14.36s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:41<00:14, 14.03s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:54<00:00, 13.69s/it]100%|██████████| 4/4 [00:54<00:00, 13.64s/it]
[INFO 11-23 21:42:10] ax.service.ax_client: Completed trial 165 with data: {'mse': (7.855826, 0.0), 'compute_cost': (171.677534, 0.0)}.
[INFO 11-23 21:42:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.432504553871, 'mse': 0.03633929889897303}, {'compute_cost': {'compute_cost': 0.020406667529923758, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010401589251146298}})
[INFO 11-23 21:42:38] ax.service.ax_client: Generated new trial 166 with parameters {'dt': 0.106184, 'sensor_std': 3.221267, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.81s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:34<00:35, 17.83s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:52<00:18, 18.12s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 17.53s/it]100%|██████████| 4/4 [01:09<00:00, 17.31s/it]
[INFO 11-23 21:43:47] ax.service.ax_client: Completed trial 166 with data: {'mse': (3.55665, 0.0), 'compute_cost': (308.5292, 0.0)}.
[INFO 11-23 21:43:47] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4327449415653, 'mse': 0.03633925162184326}, {'compute_cost': {'compute_cost': 0.020306310186518867, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010353861320389148}})
[INFO 11-23 21:44:15] ax.service.ax_client: Generated new trial 167 with parameters {'dt': 0.122799, 'sensor_std': 1.93695, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:36, 12.27s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:35<00:37, 18.54s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:50<00:17, 17.18s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:04<00:00, 15.88s/it]100%|██████████| 4/4 [01:04<00:00, 16.16s/it]
[INFO 11-23 21:45:20] ax.service.ax_client: Completed trial 167 with data: {'mse': (48.87809, 0.0), 'compute_cost': (308.6897, 0.0)}.
[INFO 11-23 21:45:20] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4329934711841, 'mse': 0.036337584546464186}, {'compute_cost': {'compute_cost': 0.020172784678669446, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010580927399376452}})
[INFO 11-23 21:45:41] ax.service.ax_client: Generated new trial 168 with parameters {'dt': 0.461792, 'sensor_std': 3.982848, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:28,  9.46s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:24, 12.10s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:34<00:11, 11.50s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:44<00:00, 10.96s/it]100%|██████████| 4/4 [00:44<00:00, 11.08s/it]
[INFO 11-23 21:46:26] ax.service.ax_client: Completed trial 168 with data: {'mse': (76.361443, 0.0), 'compute_cost': (67.729484, 0.0)}.
[INFO 11-23 21:46:26] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4330650592366, 'mse': 0.036337811944925136}, {'compute_cost': {'compute_cost': 0.020217440110467787, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010690323022293825}})
[INFO 11-23 21:47:01] ax.service.ax_client: Generated new trial 169 with parameters {'dt': 0.1, 'sensor_std': 1.962352, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:17<00:53, 17.84s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:39<00:40, 20.37s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:53<00:17, 17.35s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:08<00:00, 16.43s/it]100%|██████████| 4/4 [01:08<00:00, 17.19s/it]
[INFO 11-23 21:48:10] ax.service.ax_client: Completed trial 169 with data: {'mse': (0.720493, 0.0), 'compute_cost': (377.398136, 0.0)}.
[INFO 11-23 21:48:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4331764025565, 'mse': 0.03633775403599948}, {'compute_cost': {'compute_cost': 0.020131141815938922, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.000106997213502193}})
[INFO 11-23 21:48:44] ax.service.ax_client: Generated new trial 170 with parameters {'dt': 0.200894, 'sensor_std': 0.937963, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:15<00:47, 15.67s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:30, 15.24s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:41<00:13, 13.43s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 12.81s/it]100%|██████████| 4/4 [00:53<00:00, 13.44s/it]
[INFO 11-23 21:49:38] ax.service.ax_client: Completed trial 170 with data: {'mse': (3.723302, 0.0), 'compute_cost': (257.118347, 0.0)}.
[INFO 11-23 21:49:38] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4331410715932, 'mse': 0.0363377563179732}, {'compute_cost': {'compute_cost': 0.020025019131966873, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010651362995294255}})
[INFO 11-23 21:50:10] ax.service.ax_client: Generated new trial 171 with parameters {'dt': 0.1, 'sensor_std': 0.775529, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:42, 14.14s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:31, 15.79s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:44<00:14, 14.82s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:00<00:00, 15.00s/it]100%|██████████| 4/4 [01:00<00:00, 15.01s/it]
[INFO 11-23 21:51:10] ax.service.ax_client: Completed trial 171 with data: {'mse': (0.058446, 0.0), 'compute_cost': (572.360542, 0.0)}.
[INFO 11-23 21:51:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4330880778571, 'mse': 0.036337897145214626}, {'compute_cost': {'compute_cost': 0.02013955713116123, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010667123301611194}})
[INFO 11-23 21:51:43] ax.service.ax_client: Generated new trial 172 with parameters {'dt': 0.20125, 'sensor_std': 0.90934, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:35, 11.82s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:24<00:24, 12.47s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:36<00:11, 11.92s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:48<00:00, 12.32s/it]100%|██████████| 4/4 [00:48<00:00, 12.24s/it]
[INFO 11-23 21:52:32] ax.service.ax_client: Completed trial 172 with data: {'mse': (3.839716, 0.0), 'compute_cost': (260.831837, 0.0)}.
[INFO 11-23 21:52:32] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4331458596619, 'mse': 0.03633786262661509}, {'compute_cost': {'compute_cost': 0.02000114021050665, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001050333887123119}})
[INFO 11-23 21:53:01] ax.service.ax_client: Generated new trial 173 with parameters {'dt': 0.156551, 'sensor_std': 0.793147, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.70s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:27<00:28, 14.13s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:40<00:13, 13.38s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 13.34s/it]100%|██████████| 4/4 [00:53<00:00, 13.40s/it]
[INFO 11-23 21:53:55] ax.service.ax_client: Completed trial 173 with data: {'mse': (1.499078, 0.0), 'compute_cost': (361.031894, 0.0)}.
[INFO 11-23 21:53:55] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4332123027018, 'mse': 0.03633790941590398}, {'compute_cost': {'compute_cost': 0.019890017401587377, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010471508275302292}})
[INFO 11-23 21:54:21] ax.service.ax_client: Generated new trial 174 with parameters {'dt': 0.108638, 'sensor_std': 3.033281, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:41, 13.93s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:31, 15.71s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:45<00:15, 15.18s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:01<00:00, 15.41s/it]100%|██████████| 4/4 [01:01<00:00, 15.30s/it]
[INFO 11-23 21:55:22] ax.service.ax_client: Completed trial 174 with data: {'mse': (4.064219, 0.0), 'compute_cost': (305.987853, 0.0)}.
[INFO 11-23 21:55:22] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4338714485085, 'mse': 0.0363377220917922}, {'compute_cost': {'compute_cost': 0.019789632757174214, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001042281280655866}})
[INFO 11-23 21:55:58] ax.service.ax_client: Generated new trial 175 with parameters {'dt': 0.120316, 'sensor_std': 0.806472, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:42, 14.08s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:31, 15.89s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:47<00:15, 15.96s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:01<00:00, 15.33s/it]100%|██████████| 4/4 [01:01<00:00, 15.42s/it]
[INFO 11-23 21:57:00] ax.service.ax_client: Completed trial 175 with data: {'mse': (0.6762, 0.0), 'compute_cost': (465.43385, 0.0)}.
[INFO 11-23 21:57:00] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.434958912081, 'mse': 0.03633774997114436}, {'compute_cost': {'compute_cost': 0.019741719756125407, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010433406497095653}})
[INFO 11-23 21:57:34] ax.service.ax_client: Generated new trial 176 with parameters {'dt': 0.20913, 'sensor_std': 1.803498, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:33, 11.32s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:27<00:28, 14.21s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:38<00:12, 12.85s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:50<00:00, 12.51s/it]100%|██████████| 4/4 [00:50<00:00, 12.70s/it]
[INFO 11-23 21:58:24] ax.service.ax_client: Completed trial 176 with data: {'mse': (33.713108, 0.0), 'compute_cost': (185.826421, 0.0)}.
[INFO 11-23 21:58:24] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4353380656344, 'mse': 0.036337356630683715}, {'compute_cost': {'compute_cost': 0.01944012772344635, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010538299194777215}})
[INFO 11-23 21:58:53] ax.service.ax_client: Generated new trial 177 with parameters {'dt': 0.11169, 'sensor_std': 1.662445, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.81s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:31, 15.55s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:43<00:14, 14.57s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:58<00:00, 14.53s/it]100%|██████████| 4/4 [00:58<00:00, 14.54s/it]
[INFO 11-23 21:59:52] ax.service.ax_client: Completed trial 177 with data: {'mse': (1.184893, 0.0), 'compute_cost': (358.476714, 0.0)}.
[INFO 11-23 21:59:52] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4353981063484, 'mse': 0.03633747789456265}, {'compute_cost': {'compute_cost': 0.019349765398318727, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010509511600391338}})
[INFO 11-23 22:00:24] ax.service.ax_client: Generated new trial 178 with parameters {'dt': 0.121136, 'sensor_std': 0.949848, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:36, 12.17s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:28<00:28, 14.39s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:43<00:14, 14.64s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:02<00:00, 16.64s/it]100%|██████████| 4/4 [01:02<00:00, 15.69s/it]
[INFO 11-23 22:01:27] ax.service.ax_client: Completed trial 178 with data: {'mse': (0.368764, 0.0), 'compute_cost': (423.65763, 0.0)}.
[INFO 11-23 22:01:27] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4355158450819, 'mse': 0.03633754324518357}, {'compute_cost': {'compute_cost': 0.019295746559820855, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010523382769795896}})
[INFO 11-23 22:02:21] ax.service.ax_client: Generated new trial 179 with parameters {'dt': 0.100456, 'sensor_std': 1.368556, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:40, 13.59s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:30, 15.26s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:44<00:14, 14.69s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:02<00:00, 16.25s/it]100%|██████████| 4/4 [01:02<00:00, 15.67s/it]
[INFO 11-23 22:03:23] ax.service.ax_client: Completed trial 179 with data: {'mse': (0.452471, 0.0), 'compute_cost': (430.709389, 0.0)}.
[INFO 11-23 22:03:23] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4359534938501, 'mse': 0.03633740952909115}, {'compute_cost': {'compute_cost': 0.0192189350423439, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001052227141297882}})
[INFO 11-23 22:04:03] ax.service.ax_client: Generated new trial 180 with parameters {'dt': 0.13386, 'sensor_std': 3.062986, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:35, 12.00s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:27, 13.57s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:13, 13.12s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:57<00:00, 14.95s/it]100%|██████████| 4/4 [00:57<00:00, 14.26s/it]
[INFO 11-23 22:05:00] ax.service.ax_client: Completed trial 180 with data: {'mse': (2.791058, 0.0), 'compute_cost': (247.736087, 0.0)}.
[INFO 11-23 22:05:00] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4360259766017, 'mse': 0.03633742208959667}, {'compute_cost': {'compute_cost': 0.019060647265477, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010229077113046986}})
[INFO 11-23 22:05:46] ax.service.ax_client: Generated new trial 181 with parameters {'dt': 0.1, 'sensor_std': 1.353096, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:39, 13.10s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:31, 15.54s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:16, 16.52s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:04<00:00, 16.57s/it]100%|██████████| 4/4 [01:04<00:00, 16.17s/it]
[INFO 11-23 22:06:51] ax.service.ax_client: Completed trial 181 with data: {'mse': (0.250751, 0.0), 'compute_cost': (434.761471, 0.0)}.
[INFO 11-23 22:06:51] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4363319655097, 'mse': 0.03633741169629978}, {'compute_cost': {'compute_cost': 0.0189894766072197, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010230596064954744}})
[INFO 11-23 22:07:27] ax.service.ax_client: Generated new trial 182 with parameters {'dt': 0.276626, 'sensor_std': 1.811237, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:10<00:30, 10.33s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:22<00:23, 11.70s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:34<00:11, 11.69s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:46<00:00, 11.58s/it]100%|██████████| 4/4 [00:46<00:00, 11.52s/it]
[INFO 11-23 22:08:13] ax.service.ax_client: Completed trial 182 with data: {'mse': (10.384865, 0.0), 'compute_cost': (140.271603, 0.0)}.
[INFO 11-23 22:08:13] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4356878147831, 'mse': 0.03633740493507709}, {'compute_cost': {'compute_cost': 0.018989289169369507, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001017669272299139}})
[INFO 11-23 22:08:47] ax.service.ax_client: Generated new trial 183 with parameters {'dt': 0.114797, 'sensor_std': 1.360072, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:39, 13.30s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:30<00:30, 15.31s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:43<00:14, 14.38s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:59<00:00, 15.10s/it]100%|██████████| 4/4 [00:59<00:00, 14.87s/it]
[INFO 11-23 22:09:47] ax.service.ax_client: Completed trial 183 with data: {'mse': (0.667104, 0.0), 'compute_cost': (377.896766, 0.0)}.
[INFO 11-23 22:09:47] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4357645447631, 'mse': 0.03633753879016943}, {'compute_cost': {'compute_cost': 0.018883453771693353, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010190858315527688}})
[INFO 11-23 22:10:31] ax.service.ax_client: Generated new trial 184 with parameters {'dt': 0.443869, 'sensor_std': 5.740092, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.18s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:20, 10.45s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.98s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:41<00:00, 10.53s/it]100%|██████████| 4/4 [00:41<00:00, 10.33s/it]
[INFO 11-23 22:11:12] ax.service.ax_client: Completed trial 184 with data: {'mse': (24.796124, 0.0), 'compute_cost': (122.457951, 0.0)}.
[INFO 11-23 22:11:12] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4355636883338, 'mse': 0.03633770305223116}, {'compute_cost': {'compute_cost': 0.018881436783492623, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010245015423959161}})
[INFO 11-23 22:11:51] ax.service.ax_client: Generated new trial 185 with parameters {'dt': 0.489868, 'sensor_std': 5.021368, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:27,  9.16s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:20, 10.11s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.71s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00,  9.93s/it]100%|██████████| 4/4 [00:39<00:00,  9.86s/it]
[INFO 11-23 22:12:31] ax.service.ax_client: Completed trial 185 with data: {'mse': (42.80439, 0.0), 'compute_cost': (61.19761, 0.0)}.
[INFO 11-23 22:12:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4350075202383, 'mse': 0.036337960545687054}, {'compute_cost': {'compute_cost': 0.01915058768516885, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.0001060560400080829}})
[INFO 11-23 22:13:24] ax.service.ax_client: Generated new trial 186 with parameters {'dt': 0.230741, 'sensor_std': 0.910828, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:34, 11.34s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:23, 11.95s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:34<00:11, 11.22s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:45<00:00, 11.29s/it]100%|██████████| 4/4 [00:45<00:00, 11.37s/it]
[INFO 11-23 22:14:10] ax.service.ax_client: Completed trial 186 with data: {'mse': (2.780976, 0.0), 'compute_cost': (227.300777, 0.0)}.
[INFO 11-23 22:14:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4348733071415, 'mse': 0.03633800193520287}, {'compute_cost': {'compute_cost': 0.019048189357960904, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010566378665171605}})
[INFO 11-23 22:15:15] ax.service.ax_client: Generated new trial 187 with parameters {'dt': 0.109155, 'sensor_std': 1.991938, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:16<00:48, 16.20s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:31<00:31, 15.80s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:44<00:14, 14.65s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:59<00:00, 14.58s/it]100%|██████████| 4/4 [00:59<00:00, 14.87s/it]
[INFO 11-23 22:16:14] ax.service.ax_client: Completed trial 187 with data: {'mse': (2.249001, 0.0), 'compute_cost': (344.010758, 0.0)}.
[INFO 11-23 22:16:14] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4349744155953, 'mse': 0.036337914939444715}, {'compute_cost': {'compute_cost': 0.018961723457268684, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010530782554082175}})
[INFO 11-23 22:17:10] ax.service.ax_client: Generated new trial 188 with parameters {'dt': 0.14965, 'sensor_std': 0.868438, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:34, 11.66s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:25<00:26, 13.06s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:37<00:12, 12.68s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:53<00:00, 13.94s/it]100%|██████████| 4/4 [00:53<00:00, 13.45s/it]
[INFO 11-23 22:18:04] ax.service.ax_client: Completed trial 188 with data: {'mse': (0.747893, 0.0), 'compute_cost': (359.421173, 0.0)}.
[INFO 11-23 22:18:04] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4357586158351, 'mse': 0.03633790119841329}, {'compute_cost': {'compute_cost': 0.01866002069931275, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010279384282638424}})
[INFO 11-23 22:18:58] ax.service.ax_client: Generated new trial 189 with parameters {'dt': 0.108048, 'sensor_std': 0.825664, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:38, 12.71s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:29<00:30, 15.15s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:44<00:14, 14.94s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:59<00:00, 14.90s/it]100%|██████████| 4/4 [00:59<00:00, 14.77s/it]
[INFO 11-23 22:19:57] ax.service.ax_client: Completed trial 189 with data: {'mse': (2.650654, 0.0), 'compute_cost': (511.612901, 0.0)}.
[INFO 11-23 22:19:57] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.437042189172, 'mse': 0.03633793875099478}, {'compute_cost': {'compute_cost': 0.01868781643427476, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010242297059739413}})
[INFO 11-23 22:20:58] ax.service.ax_client: Generated new trial 190 with parameters {'dt': 0.138514, 'sensor_std': 0.665851, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:12<00:37, 12.44s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:26<00:27, 13.59s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:39<00:13, 13.07s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:56<00:00, 14.53s/it]100%|██████████| 4/4 [00:56<00:00, 14.02s/it]
[INFO 11-23 22:21:54] ax.service.ax_client: Completed trial 190 with data: {'mse': (2.085043, 0.0), 'compute_cost': (451.549486, 0.0)}.
[INFO 11-23 22:21:54] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4341777658882, 'mse': 0.03633802480661963}, {'compute_cost': {'compute_cost': 0.018635180989540118, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010208965359759224}})
[INFO 11-23 22:22:38] ax.service.ax_client: Generated new trial 191 with parameters {'dt': 0.630079, 'sensor_std': 4.678002, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:08<00:25,  8.65s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:19,  9.73s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:28<00:09,  9.34s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:37<00:00,  9.53s/it]100%|██████████| 4/4 [00:37<00:00,  9.46s/it]
[INFO 11-23 22:23:16] ax.service.ax_client: Completed trial 191 with data: {'mse': (81.273689, 0.0), 'compute_cost': (48.159308, 0.0)}.
[INFO 11-23 22:23:16] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4333880200597, 'mse': 0.03633828799453198}, {'compute_cost': {'compute_cost': 0.018916145561091165, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010566820321723714}})
[INFO 11-23 22:24:27] ax.service.ax_client: Generated new trial 192 with parameters {'dt': 0.142539, 'sensor_std': 0.773268, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:11<00:35, 11.95s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:25<00:26, 13.19s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:37<00:12, 12.60s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:51<00:00, 12.93s/it]100%|██████████| 4/4 [00:51<00:00, 12.83s/it]
[INFO 11-23 22:25:18] ax.service.ax_client: Completed trial 192 with data: {'mse': (0.497818, 0.0), 'compute_cost': (402.206889, 0.0)}.
[INFO 11-23 22:25:18] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4340659685702, 'mse': 0.036338392705905775}, {'compute_cost': {'compute_cost': 0.018645518756886557, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010316167559337681}})
[INFO 11-23 22:26:07] ax.service.ax_client: Generated new trial 193 with parameters {'dt': 0.397006, 'sensor_std': 4.547051, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:09<00:28,  9.46s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:20<00:20, 10.33s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:09,  9.90s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:39<00:00, 10.00s/it]100%|██████████| 4/4 [00:39<00:00,  9.98s/it]
[INFO 11-23 22:26:47] ax.service.ax_client: Completed trial 193 with data: {'mse': (21.132145, 0.0), 'compute_cost': (76.820078, 0.0)}.
[INFO 11-23 22:26:47] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4334304823321, 'mse': 0.03633854909559453}, {'compute_cost': {'compute_cost': 0.018873659635649142, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010573218157041915}})
[INFO 11-23 22:28:05] ax.service.ax_client: Generated new trial 194 with parameters {'dt': 0.112358, 'sensor_std': 0.783871, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:18<00:56, 18.83s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:34<00:34, 17.04s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:48<00:15, 15.48s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:03<00:00, 15.29s/it]100%|██████████| 4/4 [01:03<00:00, 15.81s/it]
[INFO 11-23 22:29:08] ax.service.ax_client: Completed trial 194 with data: {'mse': (1.833834, 0.0), 'compute_cost': (506.35598, 0.0)}.
[INFO 11-23 22:29:08] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4348940946331, 'mse': 0.03633856241243727}, {'compute_cost': {'compute_cost': 0.018889589544938367, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010541529146932249}})
[INFO 11-23 22:30:08] ax.service.ax_client: Generated new trial 195 with parameters {'dt': 0.107224, 'sensor_std': 1.653275, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:13<00:41, 13.77s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:29<00:30, 15.06s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:43<00:14, 14.37s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:02<00:00, 16.32s/it]100%|██████████| 4/4 [01:02<00:00, 15.64s/it]
[INFO 11-23 22:31:10] ax.service.ax_client: Completed trial 195 with data: {'mse': (7.180008, 0.0), 'compute_cost': (374.183902, 0.0)}.
[INFO 11-23 22:31:10] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4349967603987, 'mse': 0.03633671898214352}, {'compute_cost': {'compute_cost': 0.01882117510678332, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010488322976502111}})
[INFO 11-23 22:31:56] ax.service.ax_client: Generated new trial 196 with parameters {'dt': 0.56535, 'sensor_std': 4.853061, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:08<00:25,  8.66s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:19<00:19,  9.94s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:29<00:10, 10.10s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:44<00:00, 11.95s/it]100%|██████████| 4/4 [00:44<00:00, 11.14s/it]
[INFO 11-23 22:32:40] ax.service.ax_client: Completed trial 196 with data: {'mse': (102.695389, 0.0), 'compute_cost': (53.332295, 0.0)}.
[INFO 11-23 22:32:40] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4347339292704, 'mse': 0.03633689451894995}, {'compute_cost': {'compute_cost': 0.018886817876313234, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010594136286881451}})
[INFO 11-23 22:33:19] ax.service.ax_client: Generated new trial 197 with parameters {'dt': 0.1, 'sensor_std': 1.667541, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:43, 14.34s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:35<00:37, 18.52s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:51<00:17, 17.37s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:09<00:00, 17.43s/it]100%|██████████| 4/4 [01:09<00:00, 17.33s/it]
[INFO 11-23 22:34:29] ax.service.ax_client: Completed trial 197 with data: {'mse': (0.243119, 0.0), 'compute_cost': (399.921328, 0.0)}.
[INFO 11-23 22:34:29] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4348044814642, 'mse': 0.0363365245548124}, {'compute_cost': {'compute_cost': 0.018828894469643326, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010596583314809726}})
[INFO 11-23 22:35:06] ax.service.ax_client: Generated new trial 198 with parameters {'dt': 0.111588, 'sensor_std': 0.940259, 'integration_method': 'RK1'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:161: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:161: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:153: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:159: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:162: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/entities.py:153: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
 25%|██▌       | 1/4 [00:14<00:44, 14.88s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:32<00:33, 16.65s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:46<00:15, 15.38s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [01:03<00:00, 15.78s/it]100%|██████████| 4/4 [01:03<00:00, 15.76s/it]
[INFO 11-23 22:36:09] ax.service.ax_client: Completed trial 198 with data: {'mse': (2.689474, 0.0), 'compute_cost': (462.30988, 0.0)}.
[INFO 11-23 22:36:09] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.4348544710476, 'mse': 0.03633651493420231}, {'compute_cost': {'compute_cost': 0.018810454231978843, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010560127386841882}})
[INFO 11-23 22:36:55] ax.service.ax_client: Generated new trial 199 with parameters {'dt': 0.300867, 'sensor_std': 5.20546, 'integration_method': 'RK2'}.
  0%|          | 0/4 [00:00<?, ?it/s]/home/mschl/2DSimulator/entities.py:63: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:63: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:55: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:55: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:61: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:61: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:64: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
/home/mschl/2DSimulator/example_stopping_car.py:143: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
/home/mschl/2DSimulator/entities.py:112: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:112: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  acc_new = np.array([np.cos(heading) * acc_abs, np.sin(heading) * acc_abs])
/home/mschl/2DSimulator/entities.py:104: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:104: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  return np.array([z[2],z[3],acc[0],acc[1]])
/home/mschl/2DSimulator/entities.py:110: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:110: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  velocity_rframe = np.array([np.cos(heading) * self.speed, np.sin(heading) * self.speed])
/home/mschl/2DSimulator/entities.py:113: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  z_current = np.array([self.center.x,self.center.y,velocity_rframe[0],velocity_rframe[1]])
 25%|██▌       | 1/4 [00:11<00:33, 11.33s/it]/home/mschl/2DSimulator/example_intersection.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 50%|█████     | 2/4 [00:23<00:23, 11.74s/it]/home/mschl/2DSimulator/example_frontal_collision.py:154: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
 75%|███████▌  | 3/4 [00:33<00:11, 11.13s/it]/home/mschl/2DSimulator/example_sinusoidal_car.py:157: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  "acc":np.array(acc_list).T,
100%|██████████| 4/4 [00:45<00:00, 11.39s/it]100%|██████████| 4/4 [00:45<00:00, 11.39s/it]
[INFO 11-23 22:37:40] ax.service.ax_client: Completed trial 199 with data: {'mse': (28.38335, 0.0), 'compute_cost': (182.149373, 0.0)}.
[INFO 11-23 22:37:40] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Best Values:  ({'compute_cost': 657.434803357191, 'mse': 0.036336683260513425}, {'compute_cost': {'compute_cost': 0.01877188662900772, 'mse': 0.0}, 'mse': {'compute_cost': 0.0, 'mse': 0.00010763643954935634}})
[INFO 11-23 22:38:31] ax.modelbridge.generation_strategy: Note that parameter values in dataframe are rounded to 2 decimal points; the values in the dataframe are thus not the exact ones suggested by Ax in trials.
     Generation Step  ...                              Arm Parameterizations
0                  0  ...  {'0_0': {'dt': 1.33, 'sensor_std': 3.01, 'inte...
1                  0  ...  {'1_0': {'dt': 0.79, 'sensor_std': 0.38, 'inte...
2                  0  ...  {'2_0': {'dt': 0.2, 'sensor_std': 1.63, 'integ...
3                  0  ...  {'3_0': {'dt': 0.22, 'sensor_std': 9.49, 'inte...
4                  0  ...  {'4_0': {'dt': 0.39, 'sensor_std': 4.3, 'integ...
..               ...  ...                                                ...
195                1  ...  {'195_0': {'dt': 0.11, 'sensor_std': 1.65, 'in...
196                1  ...  {'196_0': {'dt': 0.57, 'sensor_std': 4.85, 'in...
197                1  ...  {'197_0': {'dt': 0.1, 'sensor_std': 1.67, 'int...
198                1  ...  {'198_0': {'dt': 0.11, 'sensor_std': 0.94, 'in...
199                1  ...  {'199_0': {'dt': 0.3, 'sensor_std': 5.21, 'int...

[200 rows x 5 columns]
Best Parameters:  {'dt': 0.1, 'sensor_std': 0.6134870743036185, 'integration_method': 'RK1'}
Objective Value:  {'compute_cost': 657.434803357191, 'mse': 0.036336683260513425}
